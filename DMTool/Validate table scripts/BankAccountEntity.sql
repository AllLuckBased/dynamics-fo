CREATE OR ALTER PROCEDURE PWC_SP_VALIDATE_BankAccountEntity
AS
BEGIN
	--Mandatory field missing:
	INSERT INTO PWCERRORTABLE
	SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		'AccountNumber' ERRORCOLUMN, 
		PWCROWID ROWID, 
		1 CATEGORY, 
		'AccountNumber is blank when IBAN IS NOT blank' ERRORDESC, 
		'' ERRORVALUE,
	A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	WHERE 
		(AccountNumber = '' OR AccountNumber IS NULL) AND IBAN IS NOT NULL;

	-- CurrencyCode is blank
	INSERT INTO PWCERRORTABLE
	SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		'CurrencyCode' ERRORCOLUMN, 
		PWCROWID ROWID, 
		1 CATEGORY, 
		'CurrencyCode is blank' ERRORDESC, 
		'' ERRORVALUE,
	A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	WHERE 
		CurrencyCode = '' OR CurrencyCode IS NULL;

	-- Name is blank
	INSERT INTO PWCERRORTABLE
	SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		'Name' ERRORCOLUMN, 
		PWCROWID ROWID, 
		1 CATEGORY, 
		'Name is blank' ERRORDESC, 
		'' ERRORVALUE,
	A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	WHERE 
		Name = '' OR Name IS NULL;

	-- BankAccountId is blank
	INSERT INTO PWCERRORTABLE
	SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		'BankAccountId' ERRORCOLUMN, 
		PWCROWID ROWID, 
		1 CATEGORY, 
		'BankAccountId is blank' ERRORDESC, 
		'' ERRORVALUE,
	A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	WHERE 
		BankAccountId = '' OR BankAccountId IS NULL;

	-- BankAccountStatus enum has invalid enum values
	INSERT INTO PWCERRORTABLE
	SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		'BankAccountStatus' ERRORCOLUMN, 
		PWCROWID ROWID, 
		2 CATEGORY, 
		'BankAccountStatus enum has invalid enum values' ERRORDESC, 
		BankAccountStatus ERRORVALUE,
	A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	WHERE 
		BankAccountStatus IS NOT NULL 
		AND BankAccountStatus NOT IN (
			SELECT MEMBERNAME 
			FROM RETAILENUMVALUETABLE 
			WHERE ENUMNAME LIKE 'BankAccountHoldStatus'
		);

	-- RoutingNumberType enum has invalid enum values
	INSERT INTO PWCERRORTABLE
	SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		'RoutingNumberType' ERRORCOLUMN, 
		PWCROWID ROWID, 
		2 CATEGORY, 
		'RoutingNumberType enum has invalid enum values' ERRORDESC, 
		RoutingNumberType ERRORVALUE,
	A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	WHERE 
		RoutingNumberType IS NOT NULL 
		AND RoutingNumberType NOT IN (
			SELECT MEMBERNAME 
			FROM RETAILENUMVALUETABLE 
			WHERE ENUMNAME LIKE 'BankCodeType'
		);

	--Duplicate occurrence:
	INSERT INTO PWCERRORTABLE
	SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		'BankAccountId' ERRORCOLUMN, 
		PWCROWID ROWID, 
		3 CATEGORY, 
		CASE 
			WHEN LEN(BankAccountId) > 10 THEN 
				'BankAccountId has duplicate values upon truncation in ' + DATAAREAID
			ELSE 
				'BankAccountId has duplicate values in ' + DATAAREAID
		END ERRORDESC, 
		BankAccountId ERRORVALUE,
	A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	WHERE 
		CONCAT(LEFT(BankAccountId, 10), DATAAREAID) IN (
		SELECT CONCAT(LEFT(BankAccountId, 10), DATAAREAID) 
		FROM PWC_T_BankAccountEntity
		GROUP BY LEFT(BankAccountId, 10), DATAAREAID 
		HAVING COUNT(*) > 1
		);

--Invalid submaster reference:
	-- CurrencyCode validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		CASE 
			WHEN COUNT(B.CurrencyCode) = 0 THEN 'CurrencyCode'
			WHEN COUNT(E.CATEGORY) <> 0 THEN 'CurrencyCode,[PWC_T_CURRENCYENTITY]'
		END ERRORCOLUMN, 
		A.PWCROWID ROWID, 
		CASE 
			WHEN COUNT(B.CurrencyCode) = 0 THEN 4
			WHEN COUNT(E.CATEGORY) <> 0 THEN 5
		END CATEGORY, 
		CASE 
			WHEN COUNT(B.CurrencyCode) = 0 THEN 'CurrencyCode is not present in CURRENCYCODE of PWC_T_CURRENCYENTITY'
			WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_CURRENCYENTITY has error(s) in corresponding CURRENCYCODE' 
		END ERRORDESC,
		A.CURRENCYCODE ERRORVALUE,
	A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	LEFT JOIN PWC_T_CURRENCYENTITY B
		ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL') AND A.CURRENCYCODE = B.CURRENCYCODE
	LEFT JOIN PWCERRORTABLE E
		ON E.TABLEID = 'PWC_T_CURRENCYENTITY' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
			AND B.PWCROWID = E.ROWID
	WHERE 
		A.CurrencyCode IS NOT NULL AND A.CurrencyCode != ''
	GROUP BY A.PWCROWID, A.CURRENCYCODE,A.DATAAREAID) a
	WHERE CATEGORY IS NOT NULL;

	-- BankGroupId validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		CASE 
			WHEN COUNT(B.BANKGROUPID) = 0 THEN 'BankGroupId'
			WHEN COUNT(E.CATEGORY) <> 0 THEN 'BankGroupId,[PWC_T_BANKGROUPENTITY]'
		END ERRORCOLUMN,
		A.PWCROWID ROWID, 
		CASE 
			WHEN COUNT(B.BankGroupId) = 0 THEN 4
			WHEN COUNT(E.CATEGORY) <> 0 THEN 5
		END CATEGORY, 
		CASE 
			WHEN COUNT(B.BankGroupId) = 0 THEN 'BankGroupId is not present in BankGroupId of PWC_T_BankAccountEntity'
			WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_BANKGROUPENTITY has error(s) in corresponding BANKGROUPID'
		END ERRORDESC, 
		A.BANKGROUPID ERRORVALUE,
	A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	LEFT JOIN PWC_T_BANKGROUPENTITY B
		ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL') AND A.BANKGROUPID = B.BANKGROUPID
	LEFT JOIN PWCERRORTABLE E
		ON E.TABLEID = 'PWC_T_BANKGROUPENTITY' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
			AND B.PWCROWID = E.ROWID
	WHERE 
		A.BankGroupId IS NOT NULL AND A.BankGroupId != ''
	GROUP BY TABLEID, A.PWCROWID, A.BANKGROUPID, A.DATAAREAID) a
	WHERE CATEGORY IS NOT NULL;

	-- AddressCountry validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		CASE 
			WHEN COUNT(B.COUNTRYREGION) = 0 THEN 'AddressCountry'
			WHEN COUNT(E.CATEGORY) <> 0 THEN 'AddressCountry,[PWC_T_LOGISTICSADDRESSCOUNTRYREGIONENTITY]'
		END ERRORCOLUMN,
		A.PWCROWID ROWID, 
		CASE 
			WHEN COUNT(B.COUNTRYREGION) = 0 THEN 4
			WHEN COUNT(E.CATEGORY) <> 0 THEN 5
		END CATEGORY, 
		CASE 
			WHEN COUNT(B.COUNTRYREGION) = 0 THEN 'AddressCountry is not present in COUNTRYREGION of PWC_T_LOGISTICSADDRESSCOUNTRYREGIONENTITY'
			WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_LOGISTICSADDRESSCOUNTRYREGIONENTITY has error(s) in corresponding COUNTRYREGION'
		END ERRORDESC, 
		A.ADDRESSCOUNTRY ERRORVALUE,
	A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	LEFT JOIN PWC_T_LOGISTICSADDRESSCOUNTRYREGIONENTITY B
		ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL') AND A.ADDRESSCOUNTRY = B.COUNTRYREGION
	LEFT JOIN PWCERRORTABLE E
		ON E.TABLEID = 'PWC_T_LOGISTICSADDRESSCOUNTRYREGIONENTITY' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
			AND B.PWCROWID = E.ROWID
	WHERE 
		A.AddressCountry IS NOT NULL AND A.AddressCountry != ''
	GROUP BY TABLEID, A.PWCROWID, A.ADDRESSCOUNTRY, A.DATAAREAID) a
	WHERE CATEGORY IS NOT NULL;

	-- AddressState validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		CASE 
			WHEN COUNT(B.STATE) = 0 THEN 'AddressState'
			WHEN COUNT(E.CATEGORY) <> 0 THEN 'AddressState,[PWC_T_LOGISTICSADDRESSSTATEENTITY]'
		END ERRORCOLUMN,
		A.PWCROWID ROWID, 
		CASE 
			WHEN COUNT(B.STATE) = 0 THEN 4
			WHEN COUNT(E.CATEGORY) <> 0 THEN 5
		END CATEGORY, 
		CASE 
			WHEN COUNT(B.STATE) = 0 THEN 'AddressState is not present in STATE of PWC_T_LOGISTICSADDRESSSTATEENTITY'
			WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_LOGISTICSADDRESSSTATEENTITY has error(s) in corresponding STATE'
		END ERRORDESC, 
		A.ADDRESSSTATE ERRORVALUE,
	A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	LEFT JOIN PWC_T_LOGISTICSADDRESSSTATEENTITY B
		ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL') AND A.ADDRESSSTATE = B.STATE
	LEFT JOIN PWCERRORTABLE E
		ON E.TABLEID = 'PWC_T_LOGISTICSADDRESSSTATEENTITY' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
			AND B.PWCROWID = E.ROWID
	WHERE 
		A.AddressState IS NOT NULL AND A.AddressState != ''
	GROUP BY TABLEID, A.PWCROWID, A.ADDRESSSTATE, A.DATAAREAID) a
	WHERE CATEGORY IS NOT NULL;

	-- AddressCity validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		CASE 
			WHEN COUNT(B.NAME) = 0 THEN 'AddressCity'
			WHEN COUNT(E.CATEGORY) <> 0 THEN 'AddressCity,[PWC_T_LOGISTICSADDRESSCITYENTITY]'
		END ERRORCOLUMN,
		A.PWCROWID ROWID, 
		CASE 
			WHEN COUNT(B.NAME) = 0 THEN 4
			WHEN COUNT(E.CATEGORY) <> 0 THEN 5
		END CATEGORY, 
		CASE 
			WHEN COUNT(B.NAME) = 0 THEN 'AddressCity is not present in NAME of PWC_T_LOGISTICSADDRESSCITYENTITY'
			WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_LOGISTICSADDRESSCITYENTITY has error(s) in correesponding NAME'
		END ERRORDESC, 
		A.ADDRESSCITY ERRORVALUE,
	A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	LEFT JOIN PWC_T_LOGISTICSADDRESSCITYENTITY B
		ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL') AND A.ADDRESSCITY = B.NAME
	LEFT JOIN PWCERRORTABLE E
		ON E.TABLEID = 'PWC_T_LOGISTICSADDRESSCITYENTITY' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
			AND B.PWCROWID = E.ROWID
	WHERE 
		A.AddressCity IS NOT NULL AND A.AddressCity != ''
	GROUP BY TABLEID, A.PWCROWID, A.ADDRESSCITY, A.DATAAREAID) a
	WHERE CATEGORY IS NOT NULL;

	-- String length exceeded maximum
	INSERT INTO PWCERRORTABLE
	SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		'AccountNumber' ERRORCOLUMN, 
		PWCROWID ROWID, 
		7 CATEGORY, 
		'AccountNumber exceeds max length 48' ERRORDESC, 
		'' ERRORVALUE,
	A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	WHERE LEN(AccountNumber) > 48;

	INSERT INTO PWCERRORTABLE
	SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		'IBAN' ERRORCOLUMN, 
		PWCROWID ROWID, 
		7 CATEGORY, 
		'IBAN exceeds max length 48' ERRORDESC, 
		IBAN ERRORVALUE,
	A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	WHERE LEN(IBAN) > 48;

	INSERT INTO PWCERRORTABLE
	SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		'BankAccountId' ERRORCOLUMN, 
		PWCROWID ROWID, 
		7 CATEGORY, 
		'BankAccountId exceeds max length 10' ERRORDESC, 
		'' ERRORVALUE,
	A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	WHERE LEN(BankAccountId) > 10;

	-- ContactMobilePhone exceeds max length 20
	INSERT INTO PWCERRORTABLE
	SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		'ContactMobilePhone' ERRORCOLUMN, 
		PWCROWID ROWID, 
		7 CATEGORY, 
		'ContactMobilePhone exceeds max length 20' ERRORDESC, 
		ContactMobilePhone ERRORVALUE,
	A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	WHERE LEN(ContactMobilePhone) > 20;

	-- ContactName exceeds max length 60
	INSERT INTO PWCERRORTABLE
	SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		'ContactName' ERRORCOLUMN, 
		PWCROWID ROWID, 
		7 CATEGORY, 
		'ContactName exceeds max length 60' ERRORDESC, 
		ContactName ERRORVALUE,
	A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	WHERE LEN(ContactName) > 60;

	-- Name exceeds max length 60
	INSERT INTO PWCERRORTABLE
	SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		'Name' ERRORCOLUMN, 
		PWCROWID ROWID, 
		7 CATEGORY, 
		'Name exceeds max length 60' ERRORDESC, 
		Name ERRORVALUE,
	A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	WHERE LEN(Name) > 60;

	-- ContactPhoneNumber exceeds max length 20
	INSERT INTO PWCERRORTABLE
	SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		'ContactPhoneNumber' ERRORCOLUMN, 
		PWCROWID ROWID, 
		7 CATEGORY, 
		'ContactPhoneNumber exceeds max length 20' ERRORDESC, 
		ContactPhoneNumber ERRORVALUE,
	A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	WHERE LEN(ContactPhoneNumber) > 20;

	-- SWIFTCode exceeds max length 20
	INSERT INTO PWCERRORTABLE
	SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		'SWIFTCode' ERRORCOLUMN, 
		PWCROWID ROWID, 
		7 CATEGORY, 
		'SWIFTCode exceeds max length 20' ERRORDESC, 
		SWIFTCode ERRORVALUE,
	A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	WHERE LEN(SWIFTCode) > 20;

	-- ContactInternetAddress exceeds max length 255
	INSERT INTO PWCERRORTABLE
	SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		'ContactInternetAddress' ERRORCOLUMN, 
		PWCROWID ROWID, 
		7 CATEGORY, 
		'ContactInternetAddress exceeds max length 255' ERRORDESC, 
		ContactInternetAddress ERRORVALUE,
	A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	WHERE LEN(ContactInternetAddress) > 255;

	-- AddressDescription exceeds max length 60
	INSERT INTO PWCERRORTABLE
	SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		'AddressDescription' ERRORCOLUMN, 
		PWCROWID ROWID, 
		7 CATEGORY, 
		'AddressDescription exceeds max length 60' ERRORDESC, 
		AddressDescription ERRORVALUE,
	A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	WHERE LEN(AddressDescription) > 60;

	-- AddressStreet exceeds max length 250
	INSERT INTO PWCERRORTABLE
	SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		'AddressStreet' ERRORCOLUMN, 
		PWCROWID ROWID, 
		7 CATEGORY, 
		'AddressStreet exceeds max length 250' ERRORDESC, 
		AddressStreet ERRORVALUE,
	A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	WHERE LEN(AddressStreet) > 250;

	EXEC PWC_SP_CALCULATESUCCESSFULCOUNT @TableName = 'PWC_T_BankAccountEntity'
END

