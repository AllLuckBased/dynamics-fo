CREATE OR ALTER PROCEDURE PWC_SP_Validate_WMSWarehouseLocationEntity
AS
BEGIN

-- Mandatory fields missing
    -- WAREHOUSEID is blank
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_WMSWarehouseLocationEntity' TABLEID, 
        'WAREHOUSEID' ERRORCOLUMN, 
        PWCROWID ROWID, 
        1 CATEGORY, 
        'WAREHOUSEID is blank' ERRORDESC, 
        '' ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_WMSWarehouseLocationEntity A
    WHERE 
        WAREHOUSEID = '' OR WAREHOUSEID IS NULL;

    -- WAREHOUSELOCATIONID is blank
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_WMSWarehouseLocationEntity' TABLEID, 
        'WAREHOUSELOCATIONID' ERRORCOLUMN, 
        PWCROWID ROWID, 
        1 CATEGORY, 
        'WAREHOUSELOCATIONID is blank' ERRORDESC, 
        '' ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_WMSWarehouseLocationEntity A
    WHERE 
        WAREHOUSELOCATIONID = '' OR WAREHOUSELOCATIONID IS NULL;


-- Business required fields missing
    -- WAREHOUSELOCATIONPROFILEID is blank
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_WMSWarehouseLocationEntity' TABLEID, 
        'WAREHOUSELOCATIONPROFILEID' ERRORCOLUMN, 
        PWCROWID ROWID, 
        8 CATEGORY, 
        'WAREHOUSELOCATIONPROFILEID is blank' ERRORDESC, 
        '' ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_WMSWarehouseLocationEntity A
    WHERE 
        WAREHOUSELOCATIONPROFILEID = '' OR WAREHOUSELOCATIONPROFILEID IS NULL;

    -- ISDEFAULTISSUEWAREHOUSELOCATION is blank
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_WMSWarehouseLocationEntity' TABLEID, 
        'ISDEFAULTISSUEWAREHOUSELOCATION' ERRORCOLUMN, 
        PWCROWID ROWID, 
        8 CATEGORY, 
        'ISDEFAULTISSUEWAREHOUSELOCATION is blank' ERRORDESC, 
        '' ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_WMSWarehouseLocationEntity A
    WHERE 
        ISDEFAULTISSUEWAREHOUSELOCATION = '' OR ISDEFAULTISSUEWAREHOUSELOCATION IS NULL;

    -- ISDEFAULTRECEIPTWAREHOUSELOCATION is blank
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_WMSWarehouseLocationEntity' TABLEID, 
        'ISDEFAULTRECEIPTWAREHOUSELOCATION' ERRORCOLUMN, 
        PWCROWID ROWID, 
        8 CATEGORY, 
        'ISDEFAULTRECEIPTWAREHOUSELOCATION is blank' ERRORDESC, 
        '' ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_WMSWarehouseLocationEntity A
    WHERE 
        ISDEFAULTRECEIPTWAREHOUSELOCATION = '' OR ISDEFAULTRECEIPTWAREHOUSELOCATION IS NULL;



-- Duplicate Occurence
    -- WAREHOUSEID, WAREHOUSELOCATIONID, DATAAREAID has duplicate values
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_WMSWarehouseLocationEntity' TABLEID, 
        '(WAREHOUSEID, WAREHOUSELOCATIONID)' ERRORCOLUMN, 
        PWCROWID ROWID, 
        3 CATEGORY, 
        CASE 
            WHEN LEN(WAREHOUSEID) > 10 OR LEN(WAREHOUSELOCATIONID) > 10 THEN 
                'WAREHOUSEID, WAREHOUSELOCATIONID has duplicate values upon truncation in ' + DATAAREAID
            ELSE 
                'WAREHOUSEID, WAREHOUSELOCATIONID has duplicate values in ' + DATAAREAID
        END ERRORDESC, 
        CONCAT('(', WAREHOUSEID, ', ', WAREHOUSELOCATIONID, ')') ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_WMSWarehouseLocationEntity A
    WHERE 
        CONCAT(LEFT(WAREHOUSEID, 10), LEFT(WAREHOUSELOCATIONID, 10), DATAAREAID) IN (
        SELECT CONCAT(LEFT(WAREHOUSEID, 10), LEFT(WAREHOUSELOCATIONID, 10), DATAAREAID) 
        FROM PWC_T_WMSWarehouseLocationEntity
        GROUP BY LEFT(WAREHOUSEID, 10), LEFT(WAREHOUSELOCATIONID, 10), DATAAREAID 
        HAVING COUNT(*) > 1
        );



-- Invalid submaster reference
	-- WAREHOUSEID validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_WMSWarehouseLocationEntity' TABLEID, 
			CASE 
				WHEN COUNT(B.WAREHOUSEID) = 0 THEN 'WAREHOUSEID'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'WAREHOUSEID,[PWC_T_InventWarehouseEntity]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.WAREHOUSEID) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.WAREHOUSEID) = 0 THEN 'WAREHOUSEID is not present in WAREHOUSEID of PWC_T_InventWarehouseEntity'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_InventWarehouseEntity has error(s) in corresponding WAREHOUSEID'
			END ERRORDESC, 
			A.WAREHOUSEID ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_WMSWarehouseLocationEntity A
		LEFT JOIN PWC_T_InventWarehouseEntity B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL') AND A.WAREHOUSEID = B.WAREHOUSEID
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_InventWarehouseEntity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.WAREHOUSEID IS NOT NULL AND A.WAREHOUSEID != ''
		GROUP BY TABLEID, A.PWCROWID, A.WAREHOUSEID, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;

	-- WAREHOUSELOCATIONPROFILEID validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_WMSWarehouseLocationEntity' TABLEID, 
			CASE 
				WHEN COUNT(B.PROFILEID) = 0 THEN 'WAREHOUSELOCATIONPROFILEID'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'WAREHOUSELOCATIONPROFILEID,[PWC_T_WHSWarehouseLocationProfileEntity]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.PROFILEID) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.PROFILEID) = 0 THEN 'WAREHOUSELOCATIONPROFILEID is not present in PROFILEID of PWC_T_WHSWarehouseLocationProfileEntity'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_WHSWarehouseLocationProfileEntity has error(s) in corresponding PROFILEID'
			END ERRORDESC, 
			A.WAREHOUSELOCATIONPROFILEID ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_WMSWarehouseLocationEntity A
		LEFT JOIN PWC_T_WHSWarehouseLocationProfileEntity B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL') AND A.WAREHOUSELOCATIONPROFILEID = B.PROFILEID
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_WHSWarehouseLocationProfileEntity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.WAREHOUSELOCATIONPROFILEID IS NOT NULL AND A.WAREHOUSELOCATIONPROFILEID != ''
		GROUP BY TABLEID, A.PWCROWID, A.WAREHOUSELOCATIONPROFILEID, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;





-- String length exceeded
    -- WAREHOUSELOCATIONPROFILEID exceeds max length 20
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_WMSWarehouseLocationEntity' TABLEID, 
        'WAREHOUSELOCATIONPROFILEID' ERRORCOLUMN, 
        PWCROWID ROWID, 
        7 CATEGORY, 
        'WAREHOUSELOCATIONPROFILEID exceeds max length 20' ERRORDESC, 
        WAREHOUSELOCATIONPROFILEID ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_WMSWarehouseLocationEntity A
    WHERE LEN(WAREHOUSELOCATIONPROFILEID) > 20;

    -- WAREHOUSELOCATIONID exceeds max length 10
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_WMSWarehouseLocationEntity' TABLEID, 
        'WAREHOUSELOCATIONID' ERRORCOLUMN, 
        PWCROWID ROWID, 
        7 CATEGORY, 
        'WAREHOUSELOCATIONID exceeds max length 10' ERRORDESC, 
        WAREHOUSELOCATIONID ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_WMSWarehouseLocationEntity A
    WHERE LEN(WAREHOUSELOCATIONID) > 10;

    -- WAREHOUSEZONEID exceeds max length 20
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_WMSWarehouseLocationEntity' TABLEID, 
        'WAREHOUSEZONEID' ERRORCOLUMN, 
        PWCROWID ROWID, 
        7 CATEGORY, 
        'WAREHOUSEZONEID exceeds max length 20' ERRORDESC, 
        WAREHOUSEZONEID ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_WMSWarehouseLocationEntity A
    WHERE LEN(WAREHOUSEZONEID) > 20;

	EXEC PWC_SP_CALCULATESUCCESSFULCOUNT @TableName = 'PWC_T_WMSWarehouseLocationEntity'
END