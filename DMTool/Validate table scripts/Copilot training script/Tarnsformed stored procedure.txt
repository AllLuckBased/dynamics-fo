CREATE OR ALTER PROCEDURE PWC_SP_Validate_BankAccountEntity
AS
BEGIN

-- Invalid data format
	--ACTIVEFROM HAS WRONG DATE FORMAT
	INSERT INTO PWCERRORTABLE
	SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		'ACTIVEFROM' ERRORCOLUMN, 
		PWCROWID ROWID, 
		2 CATEGORY, 
		'ACTIVEFROM has wrong date format' ERRORDESC, 
		ACTIVEFROM ERRORVALUE,
		A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	WHERE 
		ACTIVEFROM IS NOT NULL AND ACTIVEFROM NOT LIKE '' AND ISDATE(ACTIVEFROM) = 0;

	--ACTIVETO HAS WRONG DATE FORMAT
	INSERT INTO PWCERRORTABLE
	SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		'ACTIVETO' ERRORCOLUMN, 
		PWCROWID ROWID, 
		2 CATEGORY, 
		'ACTIVETO has wrong date format' ERRORDESC, 
		ACTIVETO ERRORVALUE,
		A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	WHERE 
		ACTIVETO IS NOT NULL AND ACTIVETO NOT LIKE '' AND ISDATE(ACTIVETO) = 0;

	--CREDITLIMT is not a real number
	INSERT INTO PWCERRORTABLE
	SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		'CREDITLIMIT' ERRORCOLUMN, 
		PWCROWID ROWID, 
		2 CATEGORY, 
		'CREDITLIMT is not a real number' ERRORDESC, 
		CREDITLIMIT ERRORVALUE,
		A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	WHERE 
		CREDITLIMIT IS NOT NULL AND CREDITLIMIT NOT LIKE '' AND CREDITLIMIT LIKE '%[^0-9.]%';

	--RFCNUMBER is not an integer
	INSERT INTO PWCERRORTABLE
	SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		'RFCNUMBER' ERRORCOLUMN, 
		PWCROWID ROWID, 
		2 CATEGORY, 
		'RFCNUMBER is not an integer' ERRORDESC, 
		RFCNUMBER ERRORVALUE,
		A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	WHERE 
		RFCNUMBER IS NOT NULL AND RFCNUMBER NOT LIKE '' AND RFCNUMBER LIKE '%[^0-9]%';


-- Other system checks
	-- ACTIVEFROM should not be greater than ACTIVETO
	INSERT INTO PWCERRORTABLE
	SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		'(ACTIVEFROM,ACTIVETO)' ERRORCOLUMN, 
		PWCROWID ROWID, 
		6 CATEGORY, 
		'ACTIVEFROM should not be greater than ACTIVETO' ERRORDESC, 
		CONCAT('(',ACTIVEFROM,', ',ACTIVETO,')') ERRORVALUE,
		A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	WHERE 
		ACTIVEFROM IS NOT NULL AND ACTIVEFROM NOT LIKE '' AND ISDATE(ACTIVEFROM) <> 0 AND
	    	ACTIVETO IS NOT NULL AND ACTIVEFROM NOT LIKE '' AND ISDATE(ACTIVETO) <> 0 AND
		ACTIVEFROM > ACTIVETO 



--Mandatory field missing:
	--AccountNumber is blank when IBAN IS NOT blank
	INSERT INTO PWCERRORTABLE
	SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		'AccountNumber' ERRORCOLUMN, 
		PWCROWID ROWID, 
		1 CATEGORY, 
		'AccountNumber is blank when IBAN IS NOT blank' ERRORDESC, 
		'' ERRORVALUE,
		A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	WHERE 
		(AccountNumber = '' OR AccountNumber IS NULL) AND IBAN IS NOT NULL;

	-- CurrencyCode is blank
	INSERT INTO PWCERRORTABLE
	SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		'CurrencyCode' ERRORCOLUMN, 
		PWCROWID ROWID, 
		1 CATEGORY, 
		'CurrencyCode is blank' ERRORDESC, 
		'' ERRORVALUE,
		A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	WHERE 
		CurrencyCode = '' OR CurrencyCode IS NULL;



--Business required fields missing field missing:
	-- BankGroupId is blank
	INSERT INTO PWCERRORTABLE
	SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		'BankGroupId' ERRORCOLUMN, 
		PWCROWID ROWID, 
		8 CATEGORY, 
		'BankGroupId is blank' ERRORDESC, 
		'' ERRORVALUE,
		A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	WHERE 
		BankGroupId = '' OR BankGroupId IS NULL;




--Duplicate occurrence:
	-- BankAccountId has duplicates
	INSERT INTO PWCERRORTABLE
	SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		'BankAccountId' ERRORCOLUMN, 
		PWCROWID ROWID, 
		3 CATEGORY, 
		CASE 
			WHEN LEN(BankAccountId) > 20 THEN 
				'BankAccountId has duplicate values upon truncation in ' + DATAAREAID
			ELSE 
				'BankAccountId has duplicate values in ' + DATAAREAID
		END ERRORDESC, 
		BankAccountId ERRORVALUE,
		A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	WHERE 
		CONCAT(LEFT(BankAccountId, 20), DATAAREAID) IN (
		SELECT CONCAT(LEFT(BankAccountId, 20), DATAAREAID) 
		FROM PWC_T_BankAccountEntity
		GROUP BY LEFT(BankAccountId, 20), DATAAREAID 
		HAVING COUNT(*) > 1
		);


	-- BankGroupID,CurrencyCode has duplicates
	INSERT INTO PWCERRORTABLE
	SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		'(BankGroupID,CurrencyCode)' ERRORCOLUMN, 
		PWCROWID ROWID, 
		3 CATEGORY, 
		CASE 
			WHEN LEN(BankGroupID) > 20 OR LEN(CurrencyCode) > 10  THEN 
				'BankGroupID,CurrencyCode has duplicate values upon truncation in ' + DATAAREAID
			ELSE 
				'BankGroupID,CurrencyCode has duplicate values in ' + DATAAREAID
		END ERRORDESC, 
		CONCAT('(',BankGroupID, ', ',CurrencyCode,')') ERRORVALUE,
		A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	WHERE 
		CONCAT(LEFT(BankGroupID, 20),LEFT(CurrencyCode, 10), DATAAREAID) IN (
		SELECT CONCAT(LEFT(BankGroupID, 20),LEFT(CurrencyCode, 10), DATAAREAID) 
		FROM PWC_T_BankAccountEntity
		GROUP BY LEFT(BankGroupID, 20),LEFT(CurrencyCode, 10), DATAAREAID 
		HAVING COUNT(*) > 1
		);


	-- CurrencyCode has duplicates
	INSERT INTO PWCERRORTABLE
	SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		'CurrencyCode' ERRORCOLUMN, 
		PWCROWID ROWID, 
		3 CATEGORY, 
		CASE 
			WHEN LEN(CurrencyCode) > 10 THEN 
				'CurrencyCode has duplicate values upon truncation in ' + DATAAREAID
			ELSE 
				'CurrencyCode has duplicate values in ' + DATAAREAID
		END ERRORDESC, 
		CurrencyCode ERRORVALUE,
		A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	WHERE 
		CONCAT(LEFT(CurrencyCode, 10), DATAAREAID) IN (
		SELECT CONCAT(LEFT(CurrencyCode, 10), DATAAREAID) 
		FROM PWC_T_BankAccountEntity
		GROUP BY LEFT(CurrencyCode, 10), DATAAREAID 
		HAVING COUNT(*) > 1
		);




-- Invalid Enum Values
	-- BankAccountStatus enum has invalid enum values
	INSERT INTO PWCERRORTABLE
	SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		'BankAccountStatus' ERRORCOLUMN, 
		PWCROWID ROWID, 
		2 CATEGORY, 
		'BankAccountStatus enum has invalid enum values' ERRORDESC, 
		BankAccountStatus ERRORVALUE,
		A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	WHERE 
		BankAccountStatus IS NOT NULL 
		AND BankAccountStatus NOT IN (
			SELECT MEMBERNAME 
			FROM RETAILENUMVALUETABLE 
			WHERE ENUMNAME LIKE 'BankAccountHoldStatus'
		);

	-- RoutingNumberType enum has invalid enum values
	INSERT INTO PWCERRORTABLE
	SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		'RoutingNumberType' ERRORCOLUMN, 
		PWCROWID ROWID, 
		2 CATEGORY, 
		'RoutingNumberType enum has invalid enum values' ERRORDESC, 
		RoutingNumberType ERRORVALUE,
		A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	WHERE 
		RoutingNumberType IS NOT NULL 
		AND RoutingNumberType NOT IN (
			SELECT MEMBERNAME 
			FROM RETAILENUMVALUETABLE 
			WHERE ENUMNAME LIKE 'BankCodeType'
		);



--Invalid submaster reference:
	-- CurrencyCode validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		CASE 
			WHEN STRING_AGG(B.CurrencyCode, ', ') IS NULL THEN 'CurrencyCode'
			WHEN STRING_AGG(E.CATEGORY, ', ') IS NOT NULL THEN 'PWC_T_CURRENCYENTITY'
		END ERRORCOLUMN, 
		A.PWCROWID ROWID, 
		CASE 
			WHEN STRING_AGG(B.CurrencyCode, ', ') IS NULL THEN 4
			WHEN STRING_AGG(E.CATEGORY, ', ') IS NOT NULL THEN 5
		END CATEGORY, 
		CASE 
			WHEN STRING_AGG(B.CurrencyCode, ', ') IS NULL THEN 'CurrencyCode is not present in CURRENCYID of PWC_T_CURRENCYENTITY'
			WHEN STRING_AGG(E.CATEGORY, ', ') IS NOT NULL THEN 'PWC_T_CURRENCYENTITY has error(s) in corresponding CURRENCYID'
		END ERRORDESC,
		A.CurrencyCode ERRORVALUE,
		A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	LEFT JOIN PWC_T_CURRENCYENTITY B
		ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL') AND A.CURRENCYCODE = B.CURRENCYID
	LEFT JOIN PWCERRORTABLE E
		ON E.TABLEID = 'PWC_T_CURRENCYENTITY' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
			AND B.PWCROWID = E.ROWID
	WHERE 
		A.CurrencyCode IS NOT NULL AND A.CurrencyCode != ''
	GROUP BY A.PWCROWID, A.CURRENCYCODE,A.DATAAREAID) a
	WHERE CATEGORY IS NOT NULL;

	-- BankGroupId validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		CASE 
			WHEN STRING_AGG(B.BANKGROUPID, ', ') IS NULL THEN 'BankGroupId'
			WHEN STRING_AGG(E.CATEGORY, ', ') IS NOT NULL THEN 'PWC_T_BANKGROUPENTITY'
		END ERRORCOLUMN,
		A.PWCROWID ROWID, 
		CASE 
			WHEN STRING_AGG(B.BankGroupId, ', ') IS NULL THEN 4
			WHEN STRING_AGG(E.CATEGORY, ', ') IS NOT NULL THEN 5
		END CATEGORY, 
		CASE 
			WHEN STRING_AGG(B.BankGroupId, ', ') IS NULL THEN 'BankGroupId is not present in GROUPID of PWC_T_BANKGROUPENTITY'
			WHEN STRING_AGG(E.CATEGORY, ', ') IS NOT NULL THEN 'PWC_T_BANKGROUPENTITY has error(s) in corresponding GROUPID'
		END ERRORDESC, 
		A.BANKGROUPID ERRORVALUE,
		A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	LEFT JOIN PWC_T_BANKGROUPENTITY B
		ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL') AND A.BANKGROUPID = B.GROUPID
	LEFT JOIN PWCERRORTABLE E
		ON E.TABLEID = 'PWC_T_BANKGROUPENTITY' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
			AND B.PWCROWID = E.ROWID
	WHERE 
		A.BankGroupId IS NOT NULL AND A.BankGroupId != ''
	GROUP BY TABLEID, A.PWCROWID, A.BANKGROUPID,A.DATAAREAID) a
	WHERE CATEGORY IS NOT NULL;

	-- ADDRESSCOUNTRYREGIONID, ADDRESSCITY validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		CASE 
			WHEN STRING_AGG(B.COUNTRYREGIONID, ', ') IS NULL THEN '(ADDRESSCOUNTRYREGIONID,ADDRESSCITY)'
			WHEN STRING_AGG(E.CATEGORY, ', ') IS NOT NULL THEN 'PWC_T_LogisticsAddressCityEntity'
		END ERRORCOLUMN,
		A.PWCROWID ROWID, 
		CASE 
			WHEN STRING_AGG(B.COUNTRYREGIONID, ', ') IS NULL THEN 4
			WHEN STRING_AGG(E.CATEGORY, ', ') IS NOT NULL THEN 5
		END CATEGORY, 
		CASE 
			WHEN STRING_AGG(B.COUNTRYREGIONID, ', ') IS NULL THEN 'ADDRESSCOUNTRYREGIONID, ADDRESSCITY is not present in COUNTRYREGIONID,NAME of PWC_T_LogisticsAddressCityEntity'
			WHEN STRING_AGG(E.CATEGORY, ', ') IS NOT NULL THEN 'PWC_T_LogisticsAddressCityEntity has error(s) in corresponding COUNTRYREGIONID,NAME'
		END ERRORDESC, 
		CONCAT('(',A.ADDRESSCOUNTRYREGIONID,',',A.ADDRESSCITY,')') ERRORVALUE,
		A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	LEFT JOIN PWC_T_LogisticsAddressCityEntity B
		ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL') AND A.ADDRESSCOUNTRYREGIONID = B.COUNTRYREGIONID AND A.ADDRESSCITY = B.NAME
	LEFT JOIN PWCERRORTABLE E
		ON E.TABLEID = 'PWC_T_LogisticsAddressCityEntity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
			AND B.PWCROWID = E.ROWID
	WHERE 
		A.ADDRESSCOUNTRYREGIONID IS NOT NULL AND A.ADDRESSCOUNTRYREGIONID != '' AND
		A.ADDRESSCITY IS NOT NULL AND A.ADDRESSCITY != '' 
	GROUP BY TABLEID, A.PWCROWID, A.ADDRESSCOUNTRYREGIONID,A.ADDRESSCITY,A.DATAAREAID) a
	WHERE CATEGORY IS NOT NULL;




-- String length exceeded maximum
	-- ACCOUNTNUMBER exceeds max length 40
	INSERT INTO PWCERRORTABLE
	SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		'AccountNumber' ERRORCOLUMN, 
		PWCROWID ROWID, 
		7 CATEGORY, 
		'AccountNumber exceeds max length 48' ERRORDESC, 
		'' ERRORVALUE,
		A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	WHERE LEN(AccountNumber) > 48;

	-- IBAN exceeds max length 40
	INSERT INTO PWCERRORTABLE
	SELECT 
		'PWC_T_BankAccountEntity' TABLEID, 
		'IBAN' ERRORCOLUMN, 
		PWCROWID ROWID, 
		7 CATEGORY, 
		'IBAN exceeds max length 40' ERRORDESC, 
		IBAN ERRORVALUE,
		A.DATAAREAID DATAAREAID
	FROM PWC_T_BankAccountEntity A
	WHERE LEN(IBAN) > 40;

	EXEC PWC_SP_CALCULATESUCCESSFULCOUNT @TableName = 'PWC_T_BankAccountEntity'
END