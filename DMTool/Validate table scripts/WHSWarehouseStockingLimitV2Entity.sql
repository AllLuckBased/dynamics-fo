CREATE OR ALTER PROCEDURE PWC_SP_Validate_WHSWarehouseStockingLimitV2Entity
AS
BEGIN

-- Invalid data type
    -- QUANTITYLIMIT is not a real number
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_WHSWarehouseStockingLimitV2Entity' TABLEID, 
        'QUANTITYLIMIT' ERRORCOLUMN, 
        PWCROWID ROWID, 
        2 CATEGORY, 
        'QUANTITYLIMIT is not a real number' ERRORDESC, 
        QUANTITYLIMIT ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_WHSWarehouseStockingLimitV2Entity A
    WHERE 
        QUANTITYLIMIT LIKE '%[^0-9.]%';

    -- ISUNLIMITEDQUANTITYALLOWED has wrong BOOLEAN FORMAT
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_WHSWarehouseStockingLimitV2Entity' TABLEID, 
        'ISUNLIMITEDQUANTITYALLOWED' ERRORCOLUMN, 
        PWCROWID ROWID, 
        2 CATEGORY, 
        'ISUNLIMITEDQUANTITYALLOWED has wrong BOOLEAN FORMAT' ERRORDESC, 
        ISUNLIMITEDQUANTITYALLOWED ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_WHSWarehouseStockingLimitV2Entity A
    WHERE 
        LOWER(ISUNLIMITEDQUANTITYALLOWED) NOT IN ('no', 'yes');



-- Other system checks
    -- QUANTITYLIMIT is blank when ISUNLIMITEDQUANTITYALLOWED is neither blank nor "No"
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_WHSWarehouseStockingLimitV2Entity' TABLEID, 
        'QUANTITYLIMIT' ERRORCOLUMN, 
        PWCROWID ROWID, 
        6 CATEGORY, 
        'QUANTITYLIMIT is blank when ISUNLIMITEDQUANTITYALLOWED is neither blank nor "No"' ERRORDESC, 
        '' ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_WHSWarehouseStockingLimitV2Entity A
    WHERE 
        (QUANTITYLIMIT = '' OR QUANTITYLIMIT IS NULL) AND (ISUNLIMITEDQUANTITYALLOWED IS NOT NULL OR UPPER(ISUNLIMITEDQUANTITYALLOWED) NOT LIKE 'NO');

    -- QUANTITYLIMIT is NOT blank when ISUNLIMITEDQUANTITYALLOWED is "Yes"
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_WHSWarehouseStockingLimitV2Entity' TABLEID, 
        'QUANTITYLIMIT' ERRORCOLUMN, 
        PWCROWID ROWID, 
        6 CATEGORY, 
        'QUANTITYLIMIT is NOT blank when ISUNLIMITEDQUANTITYALLOWED is "Yes"' ERRORDESC, 
        QUANTITYLIMIT ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_WHSWarehouseStockingLimitV2Entity A
    WHERE 
        QUANTITYLIMIT IS NOT NULL AND UPPER(ISUNLIMITEDQUANTITYALLOWED) NOT LIKE 'YES';

    -- QUANTITYLIMITUNITSYMBOL is blank when ISUNLIMITEDQUANTITYALLOWED is neither blank nor "No"
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_WHSWarehouseStockingLimitV2Entity' TABLEID, 
        'QUANTITYLIMITUNITSYMBOL' ERRORCOLUMN, 
        PWCROWID ROWID, 
        6 CATEGORY, 
        'QUANTITYLIMITUNITSYMBOL is blank when ISUNLIMITEDQUANTITYALLOWED is neither blank nor "No"' ERRORDESC, 
        '' ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_WHSWarehouseStockingLimitV2Entity A
    WHERE 
        (QUANTITYLIMITUNITSYMBOL = '' OR QUANTITYLIMITUNITSYMBOL IS NULL) AND (ISUNLIMITEDQUANTITYALLOWED IS NOT NULL OR UPPER(ISUNLIMITEDQUANTITYALLOWED) NOT LIKE 'NO');

    -- QUANTITYLIMITUNITSYMBOL is NOT blank when ISUNLIMITEDQUANTITYALLOWED is "Yes"
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_WHSWarehouseStockingLimitV2Entity' TABLEID, 
        'QUANTITYLIMITUNITSYMBOL' ERRORCOLUMN, 
        PWCROWID ROWID, 
        6 CATEGORY, 
        'QUANTITYLIMITUNITSYMBOL is NOT blank when ISUNLIMITEDQUANTITYALLOWED is "Yes"' ERRORDESC, 
        QUANTITYLIMITUNITSYMBOL ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_WHSWarehouseStockingLimitV2Entity A
    WHERE 
        QUANTITYLIMITUNITSYMBOL IS NOT NULL AND UPPER(ISUNLIMITEDQUANTITYALLOWED) NOT LIKE 'YES';






-- Business reqd fields missing
    -- WAREHOUSEID is blank
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_WHSWarehouseStockingLimitV2Entity' TABLEID, 
        'WAREHOUSEID' ERRORCOLUMN, 
        PWCROWID ROWID, 
        8 CATEGORY, 
        'WAREHOUSEID is blank' ERRORDESC, 
        '' ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_WHSWarehouseStockingLimitV2Entity A
    WHERE 
        WAREHOUSEID = '' OR WAREHOUSEID IS NULL;

    -- WAREHOUSELOCATIONID is blank
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_WHSWarehouseStockingLimitV2Entity' TABLEID, 
        'WAREHOUSELOCATIONID' ERRORCOLUMN, 
        PWCROWID ROWID, 
        8 CATEGORY, 
        'WAREHOUSELOCATIONID is blank' ERRORDESC, 
        '' ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_WHSWarehouseStockingLimitV2Entity A
    WHERE 
        WAREHOUSELOCATIONID = '' OR WAREHOUSELOCATIONID IS NULL;

    -- WAREHOUSELOCATIONPROFILEID is blank
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_WHSWarehouseStockingLimitV2Entity' TABLEID, 
        'WAREHOUSELOCATIONPROFILEID' ERRORCOLUMN, 
        PWCROWID ROWID, 
        8 CATEGORY, 
        'WAREHOUSELOCATIONPROFILEID is blank' ERRORDESC, 
        '' ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_WHSWarehouseStockingLimitV2Entity A
    WHERE 
        WAREHOUSELOCATIONPROFILEID = '' OR WAREHOUSELOCATIONPROFILEID IS NULL;

    -- ITEMNUMBER is blank
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_WHSWarehouseStockingLimitV2Entity' TABLEID, 
        'ITEMNUMBER' ERRORCOLUMN, 
        PWCROWID ROWID, 
        8 CATEGORY, 
        'ITEMNUMBER is blank' ERRORDESC, 
        '' ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_WHSWarehouseStockingLimitV2Entity A
    WHERE 
        ITEMNUMBER = '' OR ITEMNUMBER IS NULL;

    -- WAREHOUSESELECTION is blank
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_WHSWarehouseStockingLimitV2Entity' TABLEID, 
        'WAREHOUSESELECTION' ERRORCOLUMN, 
        PWCROWID ROWID, 
        8 CATEGORY, 
        'WAREHOUSESELECTION is blank' ERRORDESC, 
        '' ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_WHSWarehouseStockingLimitV2Entity A
    WHERE 
        WAREHOUSESELECTION = '' OR WAREHOUSESELECTION IS NULL;

    -- ISUNLIMITEDQUANTITYALLOWED is blank
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_WHSWarehouseStockingLimitV2Entity' TABLEID, 
        'ISUNLIMITEDQUANTITYALLOWED' ERRORCOLUMN, 
        PWCROWID ROWID, 
        8 CATEGORY, 
        'ISUNLIMITEDQUANTITYALLOWED is blank' ERRORDESC, 
        '' ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_WHSWarehouseStockingLimitV2Entity A
    WHERE 
        ISUNLIMITEDQUANTITYALLOWED = '' OR ISUNLIMITEDQUANTITYALLOWED IS NULL;




-- Duplicate Occurence
	   -- WAREHOUSEID, WAREHOUSELOCATIONID, WAREHOUSELOCATIONPROFILEID, ITEMNUMBER, QUANTITYLIMITUNITSYMBOL, DATAAREAID has duplicate values
		INSERT INTO PWCERRORTABLE
		SELECT 
			'PWC_T_WHSWarehouseStockingLimitV2Entity' TABLEID, 
			'(WAREHOUSEID, WAREHOUSELOCATIONID, WAREHOUSELOCATIONPROFILEID, ITEMNUMBER, QUANTITYLIMITUNITSYMBOL)' ERRORCOLUMN, 
			PWCROWID ROWID, 
			3 CATEGORY, 
			CASE 
				WHEN LEN(WAREHOUSEID) > 10 OR LEN(WAREHOUSELOCATIONID) > 10 OR LEN(WAREHOUSELOCATIONPROFILEID) > 20 OR LEN(ITEMNUMBER) > 20 OR LEN(QUANTITYLIMITUNITSYMBOL) > 10 THEN 
					'WAREHOUSEID, WAREHOUSELOCATIONID, WAREHOUSELOCATIONPROFILEID, ITEMNUMBER, QUANTITYLIMITUNITSYMBOL has duplicate values upon truncation in ' + DATAAREAID
				ELSE 
					'WAREHOUSEID, WAREHOUSELOCATIONID, WAREHOUSELOCATIONPROFILEID, ITEMNUMBER, QUANTITYLIMITUNITSYMBOL has duplicate values in ' + DATAAREAID
			END ERRORDESC, 
			CONCAT('(', WAREHOUSEID, ', ', WAREHOUSELOCATIONID, ', ', WAREHOUSELOCATIONPROFILEID, ', ', ITEMNUMBER, ', ', QUANTITYLIMITUNITSYMBOL, ')') ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_WHSWarehouseStockingLimitV2Entity A
		WHERE 
			CONCAT(LEFT(WAREHOUSEID, 10), LEFT(WAREHOUSELOCATIONID, 10), LEFT(WAREHOUSELOCATIONPROFILEID, 20), LEFT(ITEMNUMBER, 20), LEFT(QUANTITYLIMITUNITSYMBOL, 10), DATAAREAID) IN (
				SELECT CONCAT(LEFT(WAREHOUSEID, 10), LEFT(WAREHOUSELOCATIONID, 10), LEFT(WAREHOUSELOCATIONPROFILEID, 20), LEFT(ITEMNUMBER, 20), LEFT(QUANTITYLIMITUNITSYMBOL, 10), DATAAREAID) 
				FROM PWC_T_WHSWarehouseStockingLimitV2Entity
				GROUP BY LEFT(WAREHOUSEID, 10), LEFT(WAREHOUSELOCATIONID, 10), LEFT(WAREHOUSELOCATIONPROFILEID, 20), LEFT(ITEMNUMBER, 20), LEFT(QUANTITYLIMITUNITSYMBOL, 10), DATAAREAID 
				HAVING COUNT(*) > 1
			);





-- Invalid submaster reference
	-- QUANTITYLIMITUNITSYMBOL validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_WHSWarehouseStockingLimitV2Entity' TABLEID, 
			CASE 
				WHEN COUNT(B.UNITSYMBOL) = 0 THEN 'QUANTITYLIMITUNITSYMBOL'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'QUANTITYLIMITUNITSYMBOL,[PWC_T_UnitOfMeasureEntity]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.UNITSYMBOL) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.UNITSYMBOL) = 0 THEN 'QUANTITYLIMITUNITSYMBOL is not present in UnitSymbol of PWC_T_UnitOfMeasureEntity'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_UnitOfMeasureEntity has error(s) in corresponding UnitSymbol'
			END ERRORDESC, 
			A.QUANTITYLIMITUNITSYMBOL ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_WHSWarehouseStockingLimitV2Entity A
		LEFT JOIN PWC_T_UnitOfMeasureEntity B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL') AND A.QUANTITYLIMITUNITSYMBOL = B.UNITSYMBOL
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_UnitOfMeasureEntity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.QUANTITYLIMITUNITSYMBOL IS NOT NULL AND A.QUANTITYLIMITUNITSYMBOL != ''
		GROUP BY TABLEID, A.PWCROWID, A.QUANTITYLIMITUNITSYMBOL, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;

	-- ITEMNUMBER validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_WHSWarehouseStockingLimitV2Entity' TABLEID, 
			CASE 
				WHEN COUNT(B.ITEMNUMBER) = 0 THEN 'ITEMNUMBER'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'ITEMNUMBER,[PWC_T_EcoResReleasedProductV2Entity]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.ITEMNUMBER) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.ITEMNUMBER) = 0 THEN 'ITEMNUMBER is not present in ITEMNUMBER of PWC_T_EcoResReleasedProductV2Entity'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_EcoResReleasedProductV2Entity has error(s) in corresponding ITEMNUMBER'
			END ERRORDESC, 
			A.ITEMNUMBER ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_WHSWarehouseStockingLimitV2Entity A
		LEFT JOIN PWC_T_EcoResReleasedProductV2Entity B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL') AND A.ITEMNUMBER = B.ITEMNUMBER
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_EcoResReleasedProductV2Entity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.ITEMNUMBER IS NOT NULL AND A.ITEMNUMBER != ''
		GROUP BY TABLEID, A.PWCROWID, A.ITEMNUMBER, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;

	-- WAREHOUSEID validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_WHSWarehouseStockingLimitV2Entity' TABLEID, 
			CASE 
				WHEN COUNT(B.WAREHOUSEID) = 0 THEN 'WAREHOUSEID'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'WAREHOUSEID,[PWC_T_InventWarehouseEntity]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.WAREHOUSEID) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.WAREHOUSEID) = 0 THEN 'WAREHOUSEID is not present in WAREHOUSEID of PWC_T_InventWarehouseEntity'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_InventWarehouseEntity has error(s) in corresponding WAREHOUSEID'
			END ERRORDESC, 
			A.WAREHOUSEID ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_WHSWarehouseStockingLimitV2Entity A
		LEFT JOIN PWC_T_InventWarehouseEntity B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL') AND A.WAREHOUSEID = B.WAREHOUSEID
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_InventWarehouseEntity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.WAREHOUSEID IS NOT NULL AND A.WAREHOUSEID != ''
		GROUP BY TABLEID, A.PWCROWID, A.WAREHOUSEID, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;


	-- WAREHOUSELOCATIONPROFILEID validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_WHSWarehouseStockingLimitV2Entity' TABLEID, 
			CASE 
				WHEN COUNT(B.PROFILEID) = 0 THEN 'WAREHOUSELOCATIONPROFILEID'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'WAREHOUSELOCATIONPROFILEID,[PWC_T_WHSWarehouseLocationProfileEntity]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.PROFILEID) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.PROFILEID) = 0 THEN 'WAREHOUSELOCATIONPROFILEID is not present in PROFILEID of PWC_T_WHSWarehouseLocationProfileEntity'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_WHSWarehouseLocationProfileEntity has error(s) in corresponding PROFILEID'
			END ERRORDESC, 
			A.WAREHOUSELOCATIONPROFILEID ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_WHSWarehouseStockingLimitV2Entity A
		LEFT JOIN PWC_T_WHSWarehouseLocationProfileEntity B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL') AND A.WAREHOUSELOCATIONPROFILEID = B.PROFILEID
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_WHSWarehouseLocationProfileEntity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.WAREHOUSELOCATIONPROFILEID IS NOT NULL AND A.WAREHOUSELOCATIONPROFILEID != ''
		GROUP BY TABLEID, A.PWCROWID, A.WAREHOUSELOCATIONPROFILEID, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;

	-- WAREHOUSELOCATIONID validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_WHSWarehouseStockingLimitV2Entity' TABLEID, 
			CASE 
				WHEN COUNT(B.WAREHOUSELOCATIONID) = 0 THEN 'WAREHOUSELOCATIONID'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'WAREHOUSELOCATIONID,[PWC_T_WMSWarehouseLocationEntity]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.WAREHOUSELOCATIONID) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.WAREHOUSELOCATIONID) = 0 THEN 'WAREHOUSELOCATIONID is not present in WAREHOUSELOCATIONID of PWC_T_WMSWarehouseLocationEntity'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_WMSWarehouseLocationEntity has error(s) in corresponding WAREHOUSELOCATIONID'
			END ERRORDESC, 
			A.WAREHOUSELOCATIONID ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_WHSWarehouseStockingLimitV2Entity A
		LEFT JOIN PWC_T_WMSWarehouseLocationEntity B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL') AND A.WAREHOUSELOCATIONID = B.WAREHOUSELOCATIONID
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_WMSWarehouseLocationEntity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.WAREHOUSELOCATIONID IS NOT NULL AND A.WAREHOUSELOCATIONID != ''
		GROUP BY TABLEID, A.PWCROWID, A.WAREHOUSELOCATIONID, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;

	-- WAREHOUSEID and WAREHOUSELOCATIONID validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_WHSWarehouseStockingLimitV2Entity' TABLEID, 
			CASE 
				WHEN COUNT(B.WAREHOUSEID) = 0 THEN '(WAREHOUSEID, WAREHOUSELOCATIONID)'
				WHEN COUNT(E.CATEGORY) <> 0 THEN '(WAREHOUSEID, WAREHOUSELOCATIONID),[PWC_T_WMSWarehouseLocationEntity]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.WAREHOUSEID) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.WAREHOUSEID) = 0 THEN 'WAREHOUSEID, WAREHOUSELOCATIONID is not present in WAREHOUSEID, WAREHOUSELOCATIONID of PWC_T_WMSWarehouseLocationEntity'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_WMSWarehouseLocationEntity has error(s) in corresponding WAREHOUSEID,WAREHOUSELOCATIONID'
			END ERRORDESC, 
			CONCAT('(', A.WAREHOUSEID, ',', A.WAREHOUSELOCATIONID, ')') ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_WHSWarehouseStockingLimitV2Entity A
		LEFT JOIN PWC_T_WMSWarehouseLocationEntity B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL') AND A.WAREHOUSEID = B.WAREHOUSEID AND A.WAREHOUSELOCATIONID = B.WAREHOUSELOCATIONID
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_WMSWarehouseLocationEntity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.WAREHOUSELOCATIONID IS NOT NULL AND A.WAREHOUSEID IS NOT NULL
		GROUP BY TABLEID, A.PWCROWID, A.WAREHOUSEID, A.WAREHOUSELOCATIONID, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;
	

	-- WAREHOUSELOCATIONPROFILEID and WAREHOUSELOCATIONID validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_WHSWarehouseStockingLimitV2Entity' TABLEID, 
			CASE 
				WHEN COUNT(B.WAREHOUSELOCATIONPROFILEID) = 0 THEN '(WAREHOUSELOCATIONPROFILEID, WAREHOUSELOCATIONID)'
				WHEN COUNT(E.CATEGORY) <> 0 THEN '(WAREHOUSELOCATIONPROFILEID, WAREHOUSELOCATIONID),[PWC_T_WMSWarehouseLocationEntity]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.WAREHOUSELOCATIONPROFILEID) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.WAREHOUSELOCATIONPROFILEID) = 0 THEN 'WAREHOUSELOCATIONPROFILEID, WAREHOUSELOCATIONID is not present in WAREHOUSELOCATIONPROFILEID, WAREHOUSELOCATIONID of PWC_T_WMSWarehouseLocationEntity'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_WMSWarehouseLocationEntity has error(s) in corresponding WAREHOUSELOCATIONPROFILEID, WAREHOUSELOCATIONID'
			END ERRORDESC, 
			CONCAT('(', A.WAREHOUSELOCATIONPROFILEID, ',', A.WAREHOUSELOCATIONID, ')') ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_WHSWarehouseStockingLimitV2Entity A
		LEFT JOIN PWC_T_WMSWarehouseLocationEntity B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL') AND A.WAREHOUSELOCATIONPROFILEID = B.WAREHOUSELOCATIONPROFILEID AND A.WAREHOUSELOCATIONID = B.WAREHOUSELOCATIONID
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_WMSWarehouseLocationEntity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.WAREHOUSELOCATIONID IS NOT NULL AND A.WAREHOUSELOCATIONPROFILEID IS NOT NULL
		GROUP BY TABLEID, A.PWCROWID, A.WAREHOUSELOCATIONPROFILEID, A.WAREHOUSELOCATIONID, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;

	-- ITEMNUMBER and QUANTITYLIMITUNITSYMBOL validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_WHSWarehouseStockingLimitV2Entity' TABLEID, 
			CASE 
				WHEN COUNT(B.ITEMNUMBER) = 0 THEN '(ITEMNUMBER, QUANTITYLIMITUNITSYMBOL)'
				WHEN COUNT(E.CATEGORY) <> 0 THEN '(ITEMNUMBER, QUANTITYLIMITUNITSYMBOL),[PWC_T_EcoResReleasedProductV2Entity]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.ITEMNUMBER) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.ITEMNUMBER) = 0 THEN 'ITEMNUMBER, QUANTITYLIMITUNITSYMBOL not present in ITEMNUMBER, INVENTORYUNITSYMBOL of PWC_T_EcoResReleasedProductV2Entity'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_EcoResReleasedProductV2Entity has error(s) in ITEMNUMBER, INVENTORYUNITSYMBOL'
			END ERRORDESC, 
			CONCAT('(', A.ITEMNUMBER, ',', A.QUANTITYLIMITUNITSYMBOL, ')') ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_WHSWarehouseStockingLimitV2Entity A
		LEFT JOIN PWC_T_EcoResReleasedProductV2Entity B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL') AND A.ITEMNUMBER = B.ITEMNUMBER AND A.QUANTITYLIMITUNITSYMBOL = B.INVENTORYUNITSYMBOL
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_EcoResReleasedProductV2Entity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.ITEMNUMBER IS NOT NULL AND A.QUANTITYLIMITUNITSYMBOL IS NOT NULL
		GROUP BY TABLEID, A.PWCROWID, A.ITEMNUMBER, A.QUANTITYLIMITUNITSYMBOL, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;


	EXEC PWC_SP_CALCULATESUCCESSFULCOUNT @TableName = 'PWC_T_WHSWarehouseStockingLimitV2Entity'
END