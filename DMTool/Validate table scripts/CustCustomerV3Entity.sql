CREATE OR ALTER PROCEDURE PWC_SP_Validate_CustCustomerV3Entity
AS
BEGIN

-- Invalid data type
    -- ADDRESSVALIDFROM HAS WRONG DATE FORMAT
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_CustCustomerV3Entity' TABLEID, 
        'ADDRESSVALIDFROM' ERRORCOLUMN, 
        PWCROWID ROWID, 
        2 CATEGORY, 
        'ADDRESSVALIDFROM HAS WRONG DATE FORMAT' ERRORDESC, 
        ADDRESSVALIDFROM ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_CustCustomerV3Entity A
    WHERE
        ADDRESSVALIDFROM IS NOT NULL AND ISDATE(ADDRESSVALIDFROM) = 0;

    -- CREDMANCREDITLIMITEXPIRYDATE HAS WRONG DATE FORMAT
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_CustCustomerV3Entity' TABLEID, 
        'CREDMANCREDITLIMITEXPIRYDATE' ERRORCOLUMN, 
        PWCROWID ROWID, 
        2 CATEGORY, 
        'CREDMANCREDITLIMITEXPIRYDATE HAS WRONG DATE FORMAT' ERRORDESC, 
        CREDMANCREDITLIMITEXPIRYDATE ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_CustCustomerV3Entity A
    WHERE
        CREDMANCREDITLIMITEXPIRYDATE IS NOT NULL AND ISDATE(CREDMANCREDITLIMITEXPIRYDATE) = 0;

    -- CREDITLIMIT is not a real number
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_CustCustomerV3Entity' TABLEID, 
        'CREDITLIMIT' ERRORCOLUMN, 
        PWCROWID ROWID, 
        2 CATEGORY, 
        'CREDITLIMIT is not a real number' ERRORDESC, 
        CREDITLIMIT ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_CustCustomerV3Entity A
    WHERE 
        CREDITLIMIT LIKE '%[^0-9.]%';

    -- ADDRESSLATITUDE is not a real number
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_CustCustomerV3Entity' TABLEID, 
        'ADDRESSLATITUDE' ERRORCOLUMN, 
        PWCROWID ROWID, 
        2 CATEGORY, 
        'ADDRESSLATITUDE is not a real number' ERRORDESC, 
        ADDRESSLATITUDE ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_CustCustomerV3Entity A
    WHERE 
        ADDRESSLATITUDE LIKE '%[^0-9.]%';

    -- ADDRESSLONGITUDE is not a real number
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_CustCustomerV3Entity' TABLEID, 
        'ADDRESSLONGITUDE' ERRORCOLUMN, 
        PWCROWID ROWID, 
        2 CATEGORY, 
        'ADDRESSLONGITUDE is not a real number' ERRORDESC, 
        ADDRESSLONGITUDE ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_CustCustomerV3Entity A
    WHERE 
        ADDRESSLONGITUDE LIKE '%[^0-9.]%';



-- Mandatory fields missing
    -- CUSTOMERACCOUNT is blank
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_CustCustomerV3Entity' TABLEID, 
        'CUSTOMERACCOUNT' ERRORCOLUMN, 
        PWCROWID ROWID, 
        1 CATEGORY, 
        'CUSTOMERACCOUNT is blank' ERRORDESC, 
        '' ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_CustCustomerV3Entity A
    WHERE 
        CUSTOMERACCOUNT = '' OR CUSTOMERACCOUNT IS NULL;

    -- ORGANIZATIONNAME is blank
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_CustCustomerV3Entity' TABLEID, 
        'ORGANIZATIONNAME' ERRORCOLUMN, 
        PWCROWID ROWID, 
        1 CATEGORY, 
        'ORGANIZATIONNAME is blank' ERRORDESC, 
        '' ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_CustCustomerV3Entity A
    WHERE 
        ORGANIZATIONNAME = '' OR ORGANIZATIONNAME IS NULL;

    -- CUSTOMERGROUPID is blank
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_CustCustomerV3Entity' TABLEID, 
        'CUSTOMERGROUPID' ERRORCOLUMN, 
        PWCROWID ROWID, 
        1 CATEGORY, 
        'CUSTOMERGROUPID is blank' ERRORDESC, 
        '' ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_CustCustomerV3Entity A
    WHERE 
        CUSTOMERGROUPID = '' OR CUSTOMERGROUPID IS NULL;

    -- SALESCURRENCYCODE is blank
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_CustCustomerV3Entity' TABLEID, 
        'SALESCURRENCYCODE' ERRORCOLUMN, 
        PWCROWID ROWID, 
        1 CATEGORY, 
        'SALESCURRENCYCODE is blank' ERRORDESC, 
        '' ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_CustCustomerV3Entity A
    WHERE 
        SALESCURRENCYCODE = '' OR SALESCURRENCYCODE IS NULL;


-- Duplicate occurence
    -- CUSTOMERACCOUNT, DATAAREAID has duplicate values
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_CustCustomerV3Entity' TABLEID, 
        'CUSTOMERACCOUNT' ERRORCOLUMN, 
        PWCROWID ROWID, 
        3 CATEGORY, 
        CASE 
            WHEN LEN(CUSTOMERACCOUNT) > 20 THEN 
                'CUSTOMERACCOUNT has duplicate values upon truncation in ' + DATAAREAID
            ELSE 
                'CUSTOMERACCOUNT has duplicate values in ' + DATAAREAID
        END ERRORDESC, 
        CUSTOMERACCOUNT ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_CustCustomerV3Entity A
    WHERE 
        CONCAT(LEFT(CUSTOMERACCOUNT, 20), DATAAREAID) IN (
            SELECT CONCAT(LEFT(CUSTOMERACCOUNT, 20), DATAAREAID) 
            FROM PWC_T_CustCustomerV3Entity
            GROUP BY LEFT(CUSTOMERACCOUNT, 20), DATAAREAID 
            HAVING COUNT(*) > 1
        );



-- Invalid Enum values
    -- NATUREOFASSESSEE has invalid enum values
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_CustCustomerV3Entity' TABLEID, 
        'NATUREOFASSESSEE' ERRORCOLUMN, 
        PWCROWID ROWID, 
        2 CATEGORY, 
        'NATUREOFASSESSEE has invalid enum values' ERRORDESC, 
        NATUREOFASSESSEE ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_CustCustomerV3Entity A
    WHERE 
        NATUREOFASSESSEE IS NOT NULL AND NATUREOFASSESSEE NOT IN (
            SELECT MEMBERNAME 
            FROM RETAILENUMVALUETABLE 
            WHERE ENUMNAME LIKE 'NatureOfAssessee_IN'
        );

    -- ACCOUNTSTATEMENT has invalid enum values
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_CustCustomerV3Entity' TABLEID, 
        'ACCOUNTSTATEMENT' ERRORCOLUMN, 
        PWCROWID ROWID, 
        2 CATEGORY, 
        'ACCOUNTSTATEMENT has invalid enum values' ERRORDESC, 
        ACCOUNTSTATEMENT ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_CustCustomerV3Entity A
    WHERE 
        ACCOUNTSTATEMENT IS NOT NULL AND ACCOUNTSTATEMENT NOT IN (
            SELECT MEMBERNAME 
            FROM RETAILENUMVALUETABLE 
            WHERE ENUMNAME LIKE 'CustAccountStatement'
        );

    -- RECEIPTOPTION has invalid enum values
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_CustCustomerV3Entity' TABLEID, 
        'RECEIPTOPTION' ERRORCOLUMN, 
        PWCROWID ROWID, 
        2 CATEGORY, 
        'RECEIPTOPTION has invalid enum values' ERRORDESC, 
        RECEIPTOPTION ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_CustCustomerV3Entity A
    WHERE
        RECEIPTOPTION IS NOT NULL AND RECEIPTOPTION NOT IN (
            SELECT MEMBERNAME 
            FROM RETAILENUMVALUETABLE 
            WHERE ENUMNAME LIKE 'RetailReceiptOptionBase'
        );



-- Invalid submaster reference
	-- SALESSEGMENTID and SALESSUBSEGMENTID validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_CustCustomerV3Entity' TABLEID, 
			CASE 
				WHEN COUNT(B.BusinessSegmentCode) = 0 THEN '(SALESSEGMENTID, SALESSUBSEGMENTID)'
				WHEN COUNT(E.CATEGORY) <> 0 THEN '(SALESSEGMENTID, SALESSUBSEGMENTID),[PWC_T_smmBusinessSubsegmentEntity]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.BusinessSegmentCode) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.BusinessSegmentCode) = 0 THEN 'SALESSEGMENTID, SALESSUBSEGMENTID is not present in BusinessSegmentCode,SubsegmentCode of PWC_T_smmBusinessSubsegmentEntity'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_smmBusinessSubsegmentEntity has error(s) in corresponding BusinessSegmentCode,SubsegmentCode'
			END ERRORDESC, 
			CONCAT('(', A.SALESSEGMENTID, ',', A.SALESSUBSEGMENTID, ')') ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_CustCustomerV3Entity A
		LEFT JOIN PWC_T_smmBusinessSubsegmentEntity B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL' OR UPPER(A.DATAAREAID) = 'GLOBAL') AND A.SALESSEGMENTID = B.BusinessSegmentCode AND A.SALESSUBSEGMENTID = B.SubsegmentCode
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_smmBusinessSubsegmentEntity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.SALESSEGMENTID IS NOT NULL AND A.SALESSUBSEGMENTID IS NOT NULL
		GROUP BY TABLEID, A.PWCROWID, A.SALESSEGMENTID, A.SALESSUBSEGMENTID, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;

	-- ADDRESSCOUNTRYREGIONID, ADDRESSCITY, ADDRESSSTATE validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_CustCustomerV3Entity' TABLEID, 
			CASE 
				WHEN COUNT(B.COUNTRYREGIONID) = 0 THEN '(ADDRESSCOUNTRYREGIONID, ADDRESSCITY, ADDRESSSTATE)'
				WHEN COUNT(E.CATEGORY) <> 0 THEN '(ADDRESSCOUNTRYREGIONID, ADDRESSCITY, ADDRESSSTATE),[PWC_T_LogisticsAddressCityEntity]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.COUNTRYREGIONID) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.COUNTRYREGIONID) = 0 THEN 'ADDRESSCOUNTRYREGIONID, ADDRESSCITY, ADDRESSSTATE is not present in COUNTRYREGIONID,NAME,STATEID of PWC_T_LogisticsAddressCityEntity'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_LogisticsAddressCityEntity has error(s) in corresponding COUNTRYREGIONID,NAME,STATEID'
			END ERRORDESC, 
			CONCAT('(', A.ADDRESSCOUNTRYREGIONID, ',', A.ADDRESSCITY, ',', A.ADDRESSSTATE, ')') ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_CustCustomerV3Entity A
		LEFT JOIN PWC_T_LogisticsAddressCityEntity B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL') AND A.ADDRESSCOUNTRYREGIONID = B.COUNTRYREGIONID AND A.ADDRESSCITY = B.NAME AND A.ADDRESSSTATE = B.STATEID
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_LogisticsAddressCityEntity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.ADDRESSCOUNTRYREGIONID IS NOT NULL AND A.ADDRESSCITY IS NOT NULL AND A.ADDRESSSTATE IS NOT NULL
		GROUP BY TABLEID, A.PWCROWID, A.ADDRESSCOUNTRYREGIONID, A.ADDRESSCITY, A.ADDRESSSTATE, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;

	-- ADDRESSCOUNTRYREGIONID and ADDRESSCITY validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_CustCustomerV3Entity' TABLEID, 
			CASE 
				WHEN COUNT(B.COUNTRYREGIONID) = 0 THEN '(ADDRESSCOUNTRYREGIONID, ADDRESSCITY)'
				WHEN COUNT(E.CATEGORY) <> 0 THEN '(ADDRESSCOUNTRYREGIONID, ADDRESSCITY),[PWC_T_LogisticsAddressCityEntity]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.COUNTRYREGIONID) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.COUNTRYREGIONID) = 0 THEN 'ADDRESSCOUNTRYREGIONID, ADDRESSCITY is not present in COUNTRYREGIONID,NAME of PWC_T_LogisticsAddressCityEntity'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_LogisticsAddressCityEntity has error(s) in corresponding COUNTRYREGIONID,NAME'
			END ERRORDESC, 
			CONCAT('(', A.ADDRESSCOUNTRYREGIONID, ',', A.ADDRESSCITY, ')') ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_CustCustomerV3Entity A
		LEFT JOIN PWC_T_LogisticsAddressCityEntity B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL') AND A.ADDRESSCOUNTRYREGIONID = B.COUNTRYREGIONID AND A.ADDRESSCITY = B.NAME
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_LogisticsAddressCityEntity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.ADDRESSCOUNTRYREGIONID IS NOT NULL AND A.ADDRESSCITY IS NOT NULL
		GROUP BY TABLEID, A.PWCROWID, A.ADDRESSCOUNTRYREGIONID, A.ADDRESSCITY, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;

	-- ADDRESSCOUNTRYREGIONID validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_CustCustomerV3Entity' TABLEID, 
			CASE 
				WHEN COUNT(B.COUNTRYREGION) = 0 THEN 'ADDRESSCOUNTRYREGIONID'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'ADDRESSCOUNTRYREGIONID,[PWC_T_LOGISTICSADDRESSCOUNTRYREGIONENTITY]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.COUNTRYREGION) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.COUNTRYREGION) = 0 THEN 'ADDRESSCOUNTRYREGIONID not in COUNTRYREGION of PWC_T_LOGISTICSADDRESSCOUNTRYREGIONENTITY'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_LOGISTICSADDRESSCOUNTRYREGIONENTITY has error(s) in corresponding COUNTRYREGION'
			END ERRORDESC, 
			A.ADDRESSCOUNTRYREGIONID ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_CustCustomerV3Entity A
		LEFT JOIN PWC_T_LOGISTICSADDRESSCOUNTRYREGIONENTITY B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL' OR UPPER(A.DATAAREAID) = 'GLOBAL') AND A.ADDRESSCOUNTRYREGIONID = B.COUNTRYREGION
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_LOGISTICSADDRESSCOUNTRYREGIONENTITY' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.ADDRESSCOUNTRYREGIONID IS NOT NULL AND A.ADDRESSCOUNTRYREGIONID != ''
		GROUP BY TABLEID, A.PWCROWID, A.ADDRESSCOUNTRYREGIONID, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;

	-- DELIVERYMODE validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_CustCustomerV3Entity' TABLEID, 
			CASE 
				WHEN COUNT(B.MODECODE) = 0 THEN 'DELIVERYMODE'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'DELIVERYMODE,[PWC_T_DlvDeliveryModeEntity]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.MODECODE) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.MODECODE) = 0 THEN 'DELIVERYMODE not in MODECODE of PWC_T_DlvDeliveryModeEntity'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_DlvDeliveryModeEntity has error(s) in corresponding MODECODE'
			END ERRORDESC, 
			A.DELIVERYMODE ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_CustCustomerV3Entity A
		LEFT JOIN PWC_T_DlvDeliveryModeEntity B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL' OR UPPER(A.DATAAREAID) = 'GLOBAL') AND A.DELIVERYMODE = B.MODECODE
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_DlvDeliveryModeEntity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.DELIVERYMODE IS NOT NULL AND A.DELIVERYMODE != ''
		GROUP BY TABLEID, A.PWCROWID, A.DELIVERYMODE, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;

	-- CUSTOMERGROUPID validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_CustCustomerV3Entity' TABLEID, 
			CASE 
				WHEN COUNT(B.CustomerGroupId) = 0 THEN 'CUSTOMERGROUPID'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'CUSTOMERGROUPID,[PWC_T_CustCustomerGroupEntity]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.CustomerGroupId) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.CustomerGroupId) = 0 THEN 'CUSTOMERGROUPID is not present in CustomerGroupId of PWC_T_CustCustomerGroupEntity'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_CustCustomerGroupEntity has error(s) in corresponding CustomerGroupId'
			END ERRORDESC, 
			A.CUSTOMERGROUPID ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_CustCustomerV3Entity A
		LEFT JOIN PWC_T_CustCustomerGroupEntity B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL' OR UPPER(A.DATAAREAID) = 'GLOBAL') AND A.CUSTOMERGROUPID = B.CustomerGroupId
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_CustCustomerGroupEntity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.CUSTOMERGROUPID IS NOT NULL AND A.CUSTOMERGROUPID != ''
		GROUP BY TABLEID, A.PWCROWID, A.CUSTOMERGROUPID, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;

	-- ADDRESSCITY validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_CustCustomerV3Entity' TABLEID, 
			CASE 
				WHEN COUNT(B.NAME) = 0 THEN 'ADDRESSCITY'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'ADDRESSCITY,[PWC_T_LogisticsAddressCityEntity]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.NAME) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.NAME) = 0 THEN 'ADDRESSCITY not in NAME of PWC_T_LogisticsAddressCityEntity'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_LogisticsAddressCityEntity has error(s) in corresponding NAME'
			END ERRORDESC, 
			A.ADDRESSCITY ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_CustCustomerV3Entity A
		LEFT JOIN PWC_T_LogisticsAddressCityEntity B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL' OR UPPER(A.DATAAREAID) = 'GLOBAL') AND A.ADDRESSCITY = B.NAME
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_LogisticsAddressCityEntity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.ADDRESSCITY IS NOT NULL AND A.ADDRESSCITY != ''
		GROUP BY TABLEID, A.PWCROWID, A.ADDRESSCITY, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;

	-- ADDRESSSTATE validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_CustCustomerV3Entity' TABLEID, 
			CASE 
				WHEN COUNT(B.STATE) = 0 THEN 'ADDRESSSTATE'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'ADDRESSSTATE,[PWC_T_LogisticsAddressStateEntity]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.STATE) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.STATE) = 0 THEN 'ADDRESSSTATE not in STATE of PWC_T_LogisticsAddressStateEntity'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_LogisticsAddressStateEntity has error(s) in corresponding STATE'
			END ERRORDESC, 
			A.ADDRESSSTATE ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_CustCustomerV3Entity A
		LEFT JOIN PWC_T_LogisticsAddressStateEntity B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL' OR UPPER(A.DATAAREAID) = 'GLOBAL') AND A.ADDRESSSTATE = B.STATE
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_LogisticsAddressStateEntity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.ADDRESSSTATE IS NOT NULL AND A.ADDRESSSTATE != ''
		GROUP BY TABLEID, A.PWCROWID, A.ADDRESSSTATE, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;

	-- SALESCURRENCYCODE validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_CustCustomerV3Entity' TABLEID, 
			CASE 
				WHEN COUNT(B.CURRENCYCODE) = 0 THEN 'SALESCURRENCYCODE'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'SALESCURRENCYCODE,[PWC_T_CurrencyEntity]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.CURRENCYCODE) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.CURRENCYCODE) = 0 THEN 'SALESCURRENCYCODE is not present in CURRENCYCODE of PWC_T_CurrencyEntity'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_CurrencyEntity has error(s) in corresponding CURRENCYCODE'
			END ERRORDESC, 
			A.SALESCURRENCYCODE ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_CustCustomerV3Entity A
		LEFT JOIN PWC_T_CurrencyEntity B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL' OR UPPER(A.DATAAREAID) = 'GLOBAL') AND A.SALESCURRENCYCODE = B.CURRENCYCODE
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_CurrencyEntity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.SALESCURRENCYCODE IS NOT NULL AND A.SALESCURRENCYCODE != ''
		GROUP BY TABLEID, A.PWCROWID, A.SALESCURRENCYCODE, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;

	-- PAYMENTTERMS validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_CustCustomerV3Entity' TABLEID, 
			CASE 
				WHEN COUNT(B.NAME) = 0 THEN 'PAYMENTTERMS'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PAYMENTTERMS,[PWC_T_PaymentTermEntity]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.NAME) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.NAME) = 0 THEN 'PAYMENTTERMS is not present in NAME of PWC_T_PaymentTermEntity'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_PaymentTermEntity has error(s) in corresponding NAME'
			END ERRORDESC, 
			A.PAYMENTTERMS ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_CustCustomerV3Entity A
		LEFT JOIN PWC_T_PaymentTermEntity B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL' OR UPPER(A.DATAAREAID) = 'GLOBAL') AND A.PAYMENTTERMS = B.NAME
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_PaymentTermEntity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.PAYMENTTERMS IS NOT NULL AND A.PAYMENTTERMS != ''
		GROUP BY TABLEID, A.PWCROWID, A.PAYMENTTERMS, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;

	-- PAYMENTMETHOD validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_CustCustomerV3Entity' TABLEID, 
			CASE 
				WHEN COUNT(B.NAME) = 0 THEN 'PAYMENTMETHOD'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PAYMENTMETHOD,[PWC_T_CustomerPaymentMethodEntity]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.NAME) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.NAME) = 0 THEN 'PAYMENTMETHOD is not in Name of PWC_T_CustomerPaymentMethodEntity'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_CustomerPaymentMethodEntity has error(s) in corresponding NAME'
			END ERRORDESC, 
			A.PAYMENTMETHOD ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_CustCustomerV3Entity A
		LEFT JOIN PWC_T_CustomerPaymentMethodEntity B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL' OR UPPER(A.DATAAREAID) = 'GLOBAL') AND A.PAYMENTMETHOD = B.NAME
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_CustomerPaymentMethodEntity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.PAYMENTMETHOD IS NOT NULL AND A.PAYMENTMETHOD != ''
		GROUP BY TABLEID, A.PWCROWID, A.PAYMENTMETHOD, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;

	-- SALESTAXGROUP validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_CustCustomerV3Entity' TABLEID, 
			CASE 
				WHEN COUNT(B.TAXGROUPCODE) = 0 THEN 'SALESTAXGROUP'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'SALESTAXGROUP,[PWC_T_TaxGroupEntity]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.TAXGROUPCODE) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.TAXGROUPCODE) = 0 THEN 'SALESTAXGROUP is not in TAXGROUPCODE of PWC_T_TaxGroupEntity'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_TaxGroupEntity has error(s) in corresponding TAXGROUPCODE'
			END ERRORDESC, 
			A.SALESTAXGROUP ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_CustCustomerV3Entity A
		LEFT JOIN PWC_T_TaxGroupEntity B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL' OR UPPER(A.DATAAREAID) = 'GLOBAL') AND A.SALESTAXGROUP = B.TAXGROUPCODE
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_TaxGroupEntity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.SALESTAXGROUP IS NOT NULL AND A.SALESTAXGROUP != ''
		GROUP BY TABLEID, A.PWCROWID, A.SALESTAXGROUP, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;

	-- DELIVERYADDRESSCOUNTRYREGIONID validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_CustCustomerV3Entity' TABLEID, 
			CASE 
				WHEN COUNT(B.COUNTRYREGION) = 0 THEN 'DELIVERYADDRESSCOUNTRYREGIONID'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'DELIVERYADDRESSCOUNTRYREGIONID,[PWC_T_LogisticsAddressCountryRegionEntity]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.COUNTRYREGION) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.COUNTRYREGION) = 0 THEN 'DELIVERYADDRESSCOUNTRYREGIONID not in COUNTRYREGION of PWC_T_LogisticsAddressCountryRegionEntity'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_LogisticsAddressCountryRegionEntity has error(s) in corresponding COUNTRYREGION'
			END ERRORDESC, 
			A.DELIVERYADDRESSCOUNTRYREGIONID ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_CustCustomerV3Entity A
		LEFT JOIN PWC_T_LogisticsAddressCountryRegionEntity B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL' OR UPPER(A.DATAAREAID) = 'GLOBAL') AND A.DELIVERYADDRESSCOUNTRYREGIONID = B.COUNTRYREGION
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_LogisticsAddressCountryRegionEntity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.DELIVERYADDRESSCOUNTRYREGIONID IS NOT NULL AND A.DELIVERYADDRESSCOUNTRYREGIONID != ''
		GROUP BY TABLEID, A.PWCROWID, A.DELIVERYADDRESSCOUNTRYREGIONID, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;

	-- INVOICEACCOUNT validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_CustCustomerV3Entity' TABLEID, 
			CASE 
				WHEN COUNT(B.CUSTOMERACCOUNT) = 0 THEN 'INVOICEACCOUNT'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'INVOICEACCOUNT,[PWC_T_CustCustomerV3Entity]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.CUSTOMERACCOUNT) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.CUSTOMERACCOUNT) = 0 THEN 'INVOICEACCOUNT not in CUSTOMERACCOUNT of PWC_T_CustCustomerV3Entity'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_CustCustomerV3Entity has error(s) in corresponding CUSTOMERACCOUNT'
			END ERRORDESC, 
			A.INVOICEACCOUNT ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_CustCustomerV3Entity A
		LEFT JOIN PWC_T_CustCustomerV3Entity B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL' OR UPPER(A.DATAAREAID) = 'GLOBAL') AND A.INVOICEACCOUNT = B.CUSTOMERACCOUNT
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_CustCustomerV3Entity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.INVOICEACCOUNT IS NOT NULL AND A.INVOICEACCOUNT != ''
		GROUP BY TABLEID, A.PWCROWID, A.INVOICEACCOUNT, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;

	-- VENDORACCOUNT validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_CustCustomerV3Entity' TABLEID, 
			CASE 
				WHEN COUNT(B.VENDORACCOUNTNUMBER) = 0 THEN 'VENDORACCOUNT'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'VENDORACCOUNT,[PWC_T_VendVendorV2Entity]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.VENDORACCOUNTNUMBER) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.VENDORACCOUNTNUMBER) = 0 THEN 'VENDORACCOUNT is not in VENDORACCOUNTNUMBER of PWC_T_VendVendorV2Entity'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_VendVendorV2Entity has error(s) in corresponding PWC_T_VendVendorV2Entity'
			END ERRORDESC, 
			A.VENDORACCOUNT ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_CustCustomerV3Entity A
		LEFT JOIN PWC_T_VendVendorV2Entity B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL' OR UPPER(A.DATAAREAID) = 'GLOBAL') AND A.VENDORACCOUNT = B.VENDORACCOUNTNUMBER
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_VendVendorV2Entity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.VENDORACCOUNT IS NOT NULL AND A.VENDORACCOUNT != ''
		GROUP BY TABLEID, A.PWCROWID, A.VENDORACCOUNT, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;

	-- DELIVERYTERMS validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_CustCustomerV3Entity' TABLEID, 
			CASE 
				WHEN COUNT(B.TermsCode) = 0 THEN 'DELIVERYTERMS'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'DELIVERYTERMS,[PWC_T_DeliveryTermsEntity]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.TermsCode) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.TermsCode) = 0 THEN 'DELIVERYTERMS is not in TermsCode of PWC_T_DeliveryTermsEntity'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_DeliveryTermsEntity has error(s) in corresponding TermsCode'
			END ERRORDESC, 
			A.DELIVERYTERMS ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_CustCustomerV3Entity A
		LEFT JOIN PWC_T_DeliveryTermsEntity B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL' OR UPPER(A.DATAAREAID) = 'GLOBAL') AND A.DELIVERYTERMS = B.TermsCode
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_DeliveryTermsEntity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.DELIVERYTERMS IS NOT NULL AND A.DELIVERYTERMS != ''
		GROUP BY TABLEID, A.PWCROWID, A.DELIVERYTERMS, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;

	-- COMPANYCHAIN validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_CustCustomerV3Entity' TABLEID, 
			CASE 
				WHEN COUNT(B.CHAINNAME) = 0 THEN 'COMPANYCHAIN'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'COMPANYCHAIN,[PWC_T_smmCompanyChainEntity]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.CHAINNAME) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.CHAINNAME) = 0 THEN 'COMPANYCHAIN is not in CHAINNAME of PWC_T_smmCompanyChainEntity'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_smmCompanyChainEntity has error(s) in corresponding CHAINNAME'
			END ERRORDESC, 
			A.COMPANYCHAIN ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_CustCustomerV3Entity A
		LEFT JOIN PWC_T_smmCompanyChainEntity B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL' OR UPPER(A.DATAAREAID) = 'GLOBAL') AND A.COMPANYCHAIN = B.CHAINNAME
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_smmCompanyChainEntity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.COMPANYCHAIN IS NOT NULL AND A.COMPANYCHAIN != ''
		GROUP BY TABLEID, A.PWCROWID, A.COMPANYCHAIN, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;

	-- TAXEXEMPTNUMBER validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_CustCustomerV3Entity' TABLEID, 
			CASE 
				WHEN COUNT(B.VATNum) = 0 THEN 'TAXEXEMPTNUMBER'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'TAXEXEMPTNUMBER,[PWC_T_TaxVATNumTableEntity]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.VATNum) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.VATNum) = 0 THEN 'TAXEXEMPTNUMBER is not in VATNum of PWC_T_TaxVATNumTableEntity'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_TaxVATNumTableEntity has error(s) in corresponding VATNum'
			END ERRORDESC, 
			A.TAXEXEMPTNUMBER ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_CustCustomerV3Entity A
		LEFT JOIN PWC_T_TaxVATNumTableEntity B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL' OR UPPER(A.DATAAREAID) = 'GLOBAL') AND A.TAXEXEMPTNUMBER = B.VATNum
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_TaxVATNumTableEntity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.TAXEXEMPTNUMBER IS NOT NULL AND A.TAXEXEMPTNUMBER != ''
		GROUP BY TABLEID, A.PWCROWID, A.TAXEXEMPTNUMBER, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;

	-- SALESSEGMENTID validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_CustCustomerV3Entity' TABLEID, 
			CASE 
				WHEN COUNT(B.SegmentCode) = 0 THEN 'SALESSEGMENTID'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'SALESSEGMENTID,[PWC_T_smmBusinessSegmentEntity]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.SegmentCode) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.SegmentCode) = 0 THEN 'SALESSEGMENTID is not in SegmentCode of PWC_T_smmBusinessSegmentEntity'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_smmBusinessSegmentEntity has error(s) in corresponding SegmentCode'
			END ERRORDESC, 
			A.SALESSEGMENTID ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_CustCustomerV3Entity A
		LEFT JOIN PWC_T_smmBusinessSegmentEntity B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL' OR UPPER(A.DATAAREAID) = 'GLOBAL') AND A.SALESSEGMENTID = B.SegmentCode
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_smmBusinessSegmentEntity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.SALESSEGMENTID IS NOT NULL AND A.SALESSEGMENTID != ''
		GROUP BY TABLEID, A.PWCROWID, A.SALESSEGMENTID, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;

	-- SALESSUBSEGMENTID validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_CustCustomerV3Entity' TABLEID, 
			CASE 
				WHEN COUNT(B.SubsegmentCode) = 0 THEN 'SALESSUBSEGMENTID'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'SALESSUBSEGMENTID,[PWC_T_smmBusinessSubsegmentEntity]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.SubsegmentCode) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.SubsegmentCode) = 0 THEN 'SALESSUBSEGMENTID is not in SubsegmentCode of PWC_T_smmBusinessSubsegmentEntity'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_smmBusinessSubsegmentEntity has error(s) in corresponding SubsegmentCode'
			END ERRORDESC, 
			A.SALESSUBSEGMENTID ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_CustCustomerV3Entity A
		LEFT JOIN PWC_T_smmBusinessSubsegmentEntity B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL' OR UPPER(A.DATAAREAID) = 'GLOBAL') AND A.SALESSUBSEGMENTID = B.SubsegmentCode
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_smmBusinessSubsegmentEntity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.SALESSUBSEGMENTID IS NOT NULL AND A.SALESSUBSEGMENTID != ''
		GROUP BY TABLEID, A.PWCROWID, A.SALESSUBSEGMENTID, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;

	-- SALESDISTRICT validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_CustCustomerV3Entity' TABLEID, 
			CASE 
				WHEN COUNT(B.DistrictId) = 0 THEN 'SALESDISTRICT'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'SALESDISTRICT,[PWC_T_smmSalesDistrictEntity]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.DistrictId) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.DistrictId) = 0 THEN 'SALESDISTRICT is not in DistrictId of PWC_T_smmSalesDistrictEntity'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_smmSalesDistrictEntity has error(s) in corresponding DistrictId'
			END ERRORDESC, 
			A.SALESDISTRICT ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_CustCustomerV3Entity A
		LEFT JOIN PWC_T_smmSalesDistrictEntity B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL' OR UPPER(A.DATAAREAID) = 'GLOBAL') AND A.SALESDISTRICT = B.DistrictId
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_smmSalesDistrictEntity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.SALESDISTRICT IS NOT NULL AND A.SALESDISTRICT != ''
		GROUP BY TABLEID, A.PWCROWID, A.SALESDISTRICT, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;

	-- STATISTICSGROUPID validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_CustCustomerV3Entity' TABLEID, 
			CASE 
				WHEN COUNT(B.STATISTICSGROUP) = 0 THEN 'STATISTICGROUP'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'STATISTICGROUP,[PWC_T_CustCustomerStatisticsGroupEntity]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.STATISTICSGROUP) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.STATISTICSGROUP) = 0 THEN 'STATISTICSGROUPID is not in STATISTICSGROUP of PWC_T_CustCustomerStatisticsGroupEntity'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_CustCustomerStatisticsGroupEntity has error(s) in corresponding STATISTICSGROUP'
			END ERRORDESC, 
			A.STATISTICSGROUPID ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_CustCustomerV3Entity A
		LEFT JOIN PWC_T_CustCustomerStatisticsGroupEntity B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL' OR UPPER(A.DATAAREAID) = 'GLOBAL') AND A.STATISTICSGROUPID = B.STATISTICSGROUP
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_CustCustomerStatisticsGroupEntity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.STATISTICSGROUPID IS NOT NULL AND A.STATISTICSGROUPID != ''
		GROUP BY TABLEID, A.PWCROWID, A.STATISTICSGROUPID, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;

	-- LINEOFBUSINESSID validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_CustCustomerV3Entity' TABLEID, 
			CASE 
				WHEN COUNT(B.LINEOFBUSINESS) = 0 THEN 'LINEOFBUSINESSID'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'LINEOFBUSINESSID,[PWC_T_LineOfBusinessEntity]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.LINEOFBUSINESS) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.LINEOFBUSINESS) = 0 THEN 'LINEOFBUSINESSID is not in LINEOFBUSINESS of PWC_T_LineOfBusinessEntity'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_LineOfBusinessEntity has error(s) in correspinding LINEOFBUSINESS'
			END ERRORDESC, 
			A.LINEOFBUSINESSID ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_CustCustomerV3Entity A
		LEFT JOIN PWC_T_LineOfBusinessEntity B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL' OR UPPER(A.DATAAREAID) = 'GLOBAL') AND A.LINEOFBUSINESSID = B.LINEOFBUSINESS
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_LineOfBusinessEntity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.LINEOFBUSINESSID IS NOT NULL AND A.LINEOFBUSINESSID != ''
		GROUP BY TABLEID, A.PWCROWID, A.LINEOFBUSINESSID, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;

	-- PAYMENTBANKACCOUNT validation
	INSERT INTO PWCERRORTABLE
	SELECT * FROM (
		SELECT 
			'PWC_T_CustCustomerV3Entity' TABLEID, 
			CASE 
				WHEN COUNT(B.BANKACCOUNTID) = 0 THEN 'PAYMENTBANKACCOUNT'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PAYMENTBANKACCOUNT,[PWC_T_CustomerBankAccountEntity]'
			END ERRORCOLUMN,
			A.PWCROWID ROWID, 
			CASE 
				WHEN COUNT(B.BANKACCOUNTID) = 0 THEN 4
				WHEN COUNT(E.CATEGORY) <> 0 THEN 5
			END CATEGORY, 
			CASE 
				WHEN COUNT(B.BANKACCOUNTID) = 0 THEN 'PAYMENTBANKACCOUNT is not in BANKACCOUNTID of PWC_T_CustomerBankAccountEntity'
				WHEN COUNT(E.CATEGORY) <> 0 THEN 'PWC_T_CustomerBankAccountEntity has error(s) in corresponding BANKACCOUNTID'
			END ERRORDESC, 
			A.PAYMENTBANKACCOUNT ERRORVALUE,
			A.DATAAREAID DATAAREAID
		FROM PWC_T_CustCustomerV3Entity A
		LEFT JOIN PWC_T_CustomerBankAccountEntity B
			ON (B.DATAAREAID = A.DATAAREAID OR UPPER(B.DATAAREAID) = 'GLOBAL' OR UPPER(A.DATAAREAID) = 'GLOBAL') AND A.PAYMENTBANKACCOUNT = B.BANKACCOUNTID
		LEFT JOIN PWCERRORTABLE E
			ON E.TABLEID = 'PWC_T_CustomerBankAccountEntity' AND E.CATEGORY IN (SELECT ID FROM PWCCATEGORY WHERE STATUS = 3)
				AND B.PWCROWID = E.ROWID
		WHERE A.PAYMENTBANKACCOUNT IS NOT NULL AND A.PAYMENTBANKACCOUNT != ''
		GROUP BY TABLEID, A.PWCROWID, A.PAYMENTBANKACCOUNT, A.DATAAREAID
	) a
	WHERE CATEGORY IS NOT NULL;



-- String length exceeded

    -- ORGANIZATIONNAME exceeds max length 100
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_CustCustomerV3Entity' TABLEID, 
        'ORGANIZATIONNAME' ERRORCOLUMN, 
        PWCROWID ROWID, 
        7 CATEGORY, 
        'ORGANIZATIONNAME exceeds max length 100' ERRORDESC, 
        ORGANIZATIONNAME ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_CustCustomerV3Entity A
    WHERE LEN(ORGANIZATIONNAME) > 100;

    -- ADDRESSLOCATIONROLES exceeds max length 1000
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_CustCustomerV3Entity' TABLEID, 
        'ADDRESSLOCATIONROLES' ERRORCOLUMN, 
        PWCROWID ROWID, 
        7 CATEGORY, 
        'ADDRESSLOCATIONROLES exceeds max length 1000' ERRORDESC, 
        ADDRESSLOCATIONROLES ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_CustCustomerV3Entity A
    WHERE LEN(ADDRESSLOCATIONROLES) > 1000;

    -- CUSTOMERACCOUNT exceeds max length 20
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_CustCustomerV3Entity' TABLEID, 
        'CUSTOMERACCOUNT' ERRORCOLUMN, 
        PWCROWID ROWID, 
        7 CATEGORY, 
        'CUSTOMERACCOUNT exceeds max length 20' ERRORDESC, 
        CUSTOMERACCOUNT ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_CustCustomerV3Entity A
    WHERE LEN(CUSTOMERACCOUNT) > 20;

    -- NAMEALIAS exceeds max length 20
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_CustCustomerV3Entity' TABLEID, 
        'NAMEALIAS' ERRORCOLUMN, 
        PWCROWID ROWID, 
        7 CATEGORY, 
        'NAMEALIAS exceeds max length 20' ERRORDESC, 
        NAMEALIAS ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_CustCustomerV3Entity A
    WHERE LEN(NAMEALIAS) > 20;

    -- PERSONFIRSTNAME exceeds max length 25
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_CustCustomerV3Entity' TABLEID, 
        'PERSONFIRSTNAME' ERRORCOLUMN, 
        PWCROWID ROWID, 
        7 CATEGORY, 
        'PERSONFIRSTNAME exceeds max length 25' ERRORDESC, 
        PERSONFIRSTNAME ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_CustCustomerV3Entity A
    WHERE LEN(PERSONFIRSTNAME) > 25;

    -- PERSONLASTNAME exceeds max length 25
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_CustCustomerV3Entity' TABLEID, 
        'PERSONLASTNAME' ERRORCOLUMN, 
        PWCROWID ROWID, 
        7 CATEGORY, 
        'PERSONLASTNAME exceeds max length 25' ERRORDESC, 
        PERSONLASTNAME ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_CustCustomerV3Entity A
    WHERE LEN(PERSONLASTNAME) > 25;

    -- FULLPRIMARYADDRESS exceeds max length 250
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_CustCustomerV3Entity' TABLEID, 
        'FULLPRIMARYADDRESS' ERRORCOLUMN, 
        PWCROWID ROWID, 
        7 CATEGORY, 
        'FULLPRIMARYADDRESS exceeds max length 250' ERRORDESC, 
        FULLPRIMARYADDRESS ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_CustCustomerV3Entity A
    WHERE LEN(FULLPRIMARYADDRESS) > 250;

    -- ADDRESSDESCRIPTION exceeds max length 60
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_CustCustomerV3Entity' TABLEID, 
        'ADDRESSDESCRIPTION' ERRORCOLUMN, 
        PWCROWID ROWID, 
        7 CATEGORY, 
        'ADDRESSDESCRIPTION exceeds max length 60' ERRORDESC, 
        ADDRESSDESCRIPTION ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_CustCustomerV3Entity A
    WHERE LEN(ADDRESSDESCRIPTION) > 60;

    -- ADDRESSSTREET exceeds max length 250
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_CustCustomerV3Entity' TABLEID, 
        'ADDRESSSTREET' ERRORCOLUMN, 
        PWCROWID ROWID, 
        7 CATEGORY, 
        'ADDRESSSTREET exceeds max length 250' ERRORDESC, 
        ADDRESSSTREET ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_CustCustomerV3Entity A
    WHERE LEN(ADDRESSSTREET) > 250;

    -- PRIMARYCONTACTEMAIL exceeds max length 255
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_CustCustomerV3Entity' TABLEID, 
        'PRIMARYCONTACTEMAIL' ERRORCOLUMN, 
        PWCROWID ROWID, 
        7 CATEGORY, 
        'PRIMARYCONTACTEMAIL exceeds max length 255' ERRORDESC, 
        PRIMARYCONTACTEMAIL ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_CustCustomerV3Entity A
    WHERE LEN(PRIMARYCONTACTEMAIL) > 255;

    -- PRIMARYCONTACTEMAILDESCRIPTION exceeds max length 60
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_CustCustomerV3Entity' TABLEID, 
        'PRIMARYCONTACTEMAILDESCRIPTION' ERRORCOLUMN, 
        PWCROWID ROWID, 
        7 CATEGORY, 
        'PRIMARYCONTACTEMAILDESCRIPTION exceeds max length 60' ERRORDESC, 
        PRIMARYCONTACTEMAILDESCRIPTION ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_CustCustomerV3Entity A
    WHERE LEN(PRIMARYCONTACTEMAILDESCRIPTION) > 60;

    -- PRIMARYCONTACTPHONE exceeds max length 255
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_CustCustomerV3Entity' TABLEID, 
        'PRIMARYCONTACTPHONE' ERRORCOLUMN, 
        PWCROWID ROWID, 
        7 CATEGORY, 
        'PRIMARYCONTACTPHONE exceeds max length 255' ERRORDESC, 
        PRIMARYCONTACTPHONE ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_CustCustomerV3Entity A
    WHERE LEN(PRIMARYCONTACTPHONE) > 255;

    -- PRIMARYCONTACTPHONEDESCRIPTION exceeds max length 60
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_CustCustomerV3Entity' TABLEID, 
        'PRIMARYCONTACTPHONEDESCRIPTION' ERRORCOLUMN, 
        PWCROWID ROWID, 
        7 CATEGORY, 
        'PRIMARYCONTACTPHONEDESCRIPTION exceeds max length 60' ERRORDESC, 
        PRIMARYCONTACTPHONEDESCRIPTION ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_CustCustomerV3Entity A
    WHERE LEN(PRIMARYCONTACTPHONEDESCRIPTION) > 60;

    -- SALESCURRENCYCODE exceeds max length 3
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_CustCustomerV3Entity' TABLEID, 
        'SALESCURRENCYCODE' ERRORCOLUMN, 
        PWCROWID ROWID, 
        7 CATEGORY, 
        'SALESCURRENCYCODE exceeds max length 3' ERRORDESC, 
        SALESCURRENCYCODE ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_CustCustomerV3Entity A
    WHERE LEN(SALESCURRENCYCODE) > 3;

    -- PAYMENTTERMS exceeds max length 100
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_CustCustomerV3Entity' TABLEID, 
        'PAYMENTTERMS' ERRORCOLUMN, 
        PWCROWID ROWID, 
        7 CATEGORY, 
        'PAYMENTTERMS exceeds max length 100' ERRORDESC, 
        PAYMENTTERMS ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_CustCustomerV3Entity A
    WHERE LEN(PAYMENTTERMS) > 100;

    -- ORDERENTRYDEADLINE exceeds max length 10
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_CustCustomerV3Entity' TABLEID, 
        'ORDERENTRYDEADLINE' ERRORCOLUMN, 
        PWCROWID ROWID, 
        7 CATEGORY, 
        'ORDERENTRYDEADLINE exceeds max length 10' ERRORDESC, 
        ORDERENTRYDEADLINE ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_CustCustomerV3Entity A
    WHERE LEN(ORDERENTRYDEADLINE) > 10;

    -- IDENTIFICATIONNUMBER exceeds max length 50
    INSERT INTO PWCERRORTABLE
    SELECT 
        'PWC_T_CustCustomerV3Entity' TABLEID, 
        'IDENTIFICATIONNUMBER' ERRORCOLUMN, 
        PWCROWID ROWID, 
        7 CATEGORY, 
        'IDENTIFICATIONNUMBER exceeds max length 50' ERRORDESC, 
        IDENTIFICATIONNUMBER ERRORVALUE,
        A.DATAAREAID DATAAREAID
    FROM PWC_T_CustCustomerV3Entity A
    WHERE LEN(IDENTIFICATIONNUMBER) > 50;

	EXEC PWC_SP_CALCULATESUCCESSFULCOUNT @TableName = 'PWC_T_CustCustomerV3Entity'
END




